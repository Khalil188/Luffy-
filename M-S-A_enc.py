# Compiled By Mr Mafia | Muhammad Muzammil
# Github  :  https://github.com/Muzammil-404

import base64
exec(base64.b64decode("I19fX19fX19fX19fX19fX19fX1sgSU1QT1JUIF1fX19fX19fX19fX19fX19fX18jDQppbXBvcnQgb3MsemxpYg0KZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIG9zUlVCDQpmcm9tIG9zIGltcG9ydCBzeXN0ZW0gYXMgY21kDQpvcy5zeXN0ZW0oJ2NsZWFyJykNCnByaW50KGYnXHgxYlszODs1OzQ2bVtceDFiWzE7OTdtPVx4MWJbMzg7NTs0Nm1dIFdFTENPTUUgVE8gU0FUQU4gVE9PTCBGUkVFIFRSQUlMICcpDQp0cnk6DQogICAgaW1wb3J0IHJlcXVlc3RzIA0KZXhjZXB0IEltcG9ydEVycm9yOg0KICAgIHByaW50KGYnXHgxYlszODs1OzQ2bVtceDFiWzE7OTdtPVx4MWJbMzg7NTs0Nm1dIElOU1RBTExJTkcgUkVRVUVTVFMgJykNCiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIHJlcXVlc3RzJykNCnRyeToNCiAgICBpbXBvcnQgY29uY3VycmVudC5mdXR1cmVzDQpleGNlcHQgSW1wb3J0RXJyb3I6DQogICAgcHJpbnQoZidceDFiWzM4OzU7NDZtW1x4MWJbMTs5N209XHgxYlszODs1OzQ2bV0gSU5TVEFMTElORyBGVVRVUkVTICcpDQogICAgb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCBmdXR1cmVzJykNCnRyeToNCiAgICBpbXBvcnQgbWVjaGFuaXplDQpleGNlcHQgTW9kdWxlTm90Rm91bmRFcnJvcjoNCiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIG1lY2hhbml6ZSA+IC9kZXYvbnVsbCcpDQpmcm9tIHVybGxpYi5yZXF1ZXN0IGltcG9ydCBSZXF1ZXN0LCB1cmxvcGVuDQppbXBvcnQgb3MsIHJlcXVlc3RzLCByZSxwbGF0Zm9ybSwgc3lzLCByYW5kb20sIHN1YnByb2Nlc3MsIHRocmVhZGluZywgaXRlcnRvb2xzLGJhc2U2NCx1dWlkLHpsaWIscmUsanNvbix1dWlkLHN1YnByb2Nlc3Msc2h1dGlsLHdlYmJyb3dzZXIsdGltZSxqc29uLHN5cyxyYW5kb20sZGF0ZXRpbWUsdGltZSxyZSxzdWJwcm9jZXNzLHBsYXRmb3JtLHN0cmluZyxqc29uLHRpbWUscmUscmFuZG9tLHN5cyxzdHJpbmcsdXVpZA0KZnJvbSBjb25jdXJyZW50LmZ1dHVyZXMgaW1wb3J0IFRocmVhZFBvb2xFeGVjdXRvciBhcyBIYWJpYg0KZnJvbSBzdHJpbmcgaW1wb3J0ICogDQpmcm9tIHJhbmRvbSBpbXBvcnQgcmFuZGludA0KZnJvbSB0aW1lIGltcG9ydCBzbGVlcCBhcyBzbHANCmZyb20gb3MgaW1wb3J0IHN5c3RlbSBhcyBjbWQNCmZyb20gemxpYiBpbXBvcnQgZGVjb21wcmVzcyANCmltcG9ydCBvcywgcGxhdGZvcm0NCmZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3INCmZhc3Rfd29yayA9IFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0xNSkuc3VibWl0DQojX19fX19fX19fX19fX19fX19fWyBMT09QIF1fX19fX19fX19fX19fX19fX18jDQp0b3RhbGRtcCA9IDANCmNvdW50ID0gMA0KbG9vcCA9IDANCm9rcyA9IFtdDQpjcHMgPSBbXQ0KaWQgPSBbXQ0KcHMgPSBbXQ0Kc2lkID0gW10NCnRvdGFsPVtdDQptZXRob2RzID0gW10NCnNyYW5nZSA9IDANCnNhdmVkID0gW10NCnRvdGFsZG1wID0gMA0KZmlsdGVyID0gW10NCmxvb3Asb2ssY3AsdXNlciA9IDAsW10sW10sW10NCmNvayxwbGlzdCA9IFtdLFtdDQojX19fX19fX19fX19fX19fX19fWyBTWVMgXV9fX19fX19fX19fX19fX19fXyMNCnN5cy5zdGRvdXQud3JpdGUoJ1x4MWJdMjsgc3dhZ1x4MDcnKQ0KaGVhZGVycyA9IHsNCiAgICAnc2VjLWNoLXVhJzogJyJOb3RfQSBCcmFuZCI7dj0iOCIsICJDaHJvbWl1bSI7dj0iMTIwIicsDQogICAgJ1JlZmVyZXInOiAnaHR0cHM6Ly94LmZhY2Vib29rLmNvbS8nLA0KICAgICdzZWMtY2gtdWEtbW9iaWxlJzogJz8xJywNCiAgICAnVXNlci1BZ2VudCc6ICdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IEspIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMjAuMC4wLjAgTW9iaWxlIFNhZmFyaS81MzcuMzYnLA0KICAgICdzZWMtY2gtdWEtcGxhdGZvcm0nOiAnIkFuZHJvaWQiJywNCn0NCiNfX19fX19fX19fX19fX19fX19bIENPTE9VUiBdX19fX19fX19fX19fX19fX19fIw0KQSA9ICdceDFiWzE7OTdtJztSID0gJ1x4MWJbMzg7NTsxOTZtJztZID0gJ1wwMzNbMTszM20nO0cgPSAnXHgxYlszODs1OzQ4bSc7QiA9ICdceDFiWzM4OzU7OG0nO0cxID0gJ1x4MWJbMzg7NTs0Nm0nO0cyID0gJ1x4MWJbMzg7NTs0N20nO0czID0gJ1x4MWJbMzg7NTs0OG0nO0c0ID0gJ1x4MWJbMzg7NTs0OW0nO0c1ID0gJ1x4MWJbMzg7NTs1MG0nO1ggPSAnXDMzWzE7MzRtJztYMSA9ICdceDFiWzM4OzU7MTRtJztYMiA9ICdceDFiWzM4OzU7MTIzbSc7WDMgPSAnXHgxYlszODs1OzEyMm0nO1g0ID0gJ1x4MWJbMzg7NTs4Nm0nO1g1ID0gJ1x4MWJbMzg7NTsxMjFtJztTID0gJ1x4MWJbMTs5Nm0nO00gPSAnXHgxYlszODs1OzIwNW0nDQojX19fX19fX19fX19fX19fX19fWyBMSU5FWCBdX19fX19fX19fX19fX19fX19fIw0KZGVmIGNsZWFyKCk6b3Muc3lzdGVtKCdjbGVhcicpO3ByaW50KGxvZ28pDQpkZWYgbGluZXgoKTpwcmludChmJ3tBfeKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQojX19fX19fX19fX19fX19fX19fWyBMT0dPIF1fX19fX19fX19fX19fX19fX18jDQpsb2dvPSgiIiJcMDMzWzE7MzdtIA0K77yc77+j772A44O944CBICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8j++/o++8ng0KICAgICAg44Kd44CBICAgICAg77y8ICAgIO+8j+KMkuODvSzjg44gICAgIC/CtA0KICAgICAgICAgICAgICDjgp3jgIEgIGDvvIggKCDNocKwIM2cypYgzaHCsCkg77yPDQogICAgICAgICAgICAgICAgICAgICAgICA+ICAgICAgICAgICAs44OODQogICAgICAgICAgICAgICAgICAgIOKIoF8sLCwvwrTigJ0NCiAgICAgICAgICAgICAgICAgIOKIqeKAleKAleKAleKAleKIqQ0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KXDAzM1sxOzMybeKAolwwMzNbMTszN20gQ1JFQVRFRCBCWSAgXDAzM1sxOzMybSDigKLiiJpcMDMzWzE7MzdtICBLaGFsaWwgDQpcMDMzWzE7MzJt4oCiXDAzM1sxOzM3bSBGQUNFQk9PSyAgICBcMDMzWzE7MzJtIOKAouKImlwwMzNbMTszN20gIExVRkZZDQpcMDMzWzE7MzJt4oCiXDAzM1sxOzM3bSBUT09MUyAgICAgICBcMDMzWzE7MzJtIOKAouKImlwwMzNbMTszN20gIEZSRUUNClwwMzNbMTszMm3igKJcMDMzWzE7MzdtIFZFUlNJT04gICAgIFwwMzNbMTszMm0g4oCi4oiaXDAzM1sxOzM3bSAgXDAzM1sxOzMybTIuMlwwMzNbMTszN20gDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iIiIpDQojX19fX19fX19fX19fX19fX19fWyBSRVNVTFQgXV9fX19fX19fX19fX19fX19fXyMNCmRlZiByZXN1bHQoT0tzLGNwcyk6DQogICAgaWYgbGVuKE9LcykgIT0gMCBvciBsZW4oY3BzKSAhPSAwOg0KICAgICAgICBwcmludChmJ1xye0F94pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAJykNCiAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzF9XXtHMX0gVEhFIFBST0NFU1MgSEFTIEJFRU4gQ09NUExFVEUuLi4nKQ0KICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHMn1de0cyfSBUT1RBTCBPSyB7QX06e0cyfSAlcycgJSBzdHIobGVuKG9rcykpKQ0KICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHMn1de0czfSBUT1RBTCBDUCB7QX06e0czfSAlcycgJSBzdHIobGVuKGNwcykpKQ0KICAgICAgICBwcmludChmJ1xye0F94pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAJykNCiAgICAgICAgaW5wdXQoZiJ7RzF9W3tBfT17RzR9XXtHNH0gUFJFU1MgRU5URVIgVE8gQkFDSyBNRU5VICIpDQogICAgICAgIGV4aXQoKQ0KI19fX19fX19fX19fX19fX19fX1sgTUVOVSBdX19fX19fX19fX19fX19fX19fIw0KZGVmIG1lbnUoKTogICANCiAgICBjbGVhcigpDQogICAgcHJpbnQoZid7RzF9W3tBfTF7RzF9XXtHMX0gRklMRSBDTE9OSU5HJykNCiAgICBwcmludChmJ3tHMX1be0F9MntHMn1de0cyfSBSQU5ET00gQ0xPTklORycpDQogICAgcHJpbnQoZid7RzF9W3tBfTN7RzN9XXtHM30gQ09OVEFDVCBUT09MIE9XTkVSJykNCiAgICBwcmludChmJ3tHMX1be0F9MHtHNH1de0c0fSBFWElUIFRPT0xTJykNCiAgICBsaW5leCgpDQogICAgc2VsZWN0ID0gaW5wdXQoZid7RzF9W3tBfT97RzV9XXtHNX0gQ0hPSUNFIHtBfTp7RzV9ICcpDQogICAgaWYgc2VsZWN0ID09JzEnOg0KICAgICAgICBfZmlsZV8oKQ0KICAgIGVsaWYgc2VsZWN0ID09JzInOg0KICAgICAgICBfcmFuZG1fKCkNCiAgICBlbGlmIHNlbGVjdCA9PSczJzoNCiAgICAgICAgb3Muc3lzdGVtKCd4ZGctb3BlbiBodHRwczovL3d3dy5mYWNlYm9vay5jb20vcHJvZmlsZS5waHA/aWQ9MTAwMDAzMTc2MjM0NjM4Jm1pYmV4dGlkPUpSb0tHaScpO21lbnUoKQ0KICAgIGVsaWYgc2VsZWN0ID09JzAnOg0KICAgICAgICBleGl0KGYne0cxfVt7QX09e0cxfV17RzF9IEVYSVQgRE9ORSAnKQ0KICAgIGVsc2U6DQogICAgICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IFZBTElEIE9QVElPTicpDQogICAgICAgIHRpbWUuc2xlZXAoMikNCiAgICAgICAgbWVudSgpDQojX19fX19fX19fX19fX19fX19fWyBSQU5ET00gXV9fX19fX19fX19fX19fX19fXyMgICAgICANCmRlZiBfcmFuZG1fKCk6ICAgDQogICAgY2xlYXIoKQ0KICAgIHByaW50KGYne0cxfVt7QX0xe0cxfV17RzF9IEJBTkdMQURFU0ggQ0xPTklORycpDQogICAgcHJpbnQoZid7RzF9W3tBfTJ7RzJ9XXtHMn0gSU5ESUEgQ0xPTklORycpDQogICAgcHJpbnQoZid7RzF9W3tBfTB7RzN9XXtHM30gQkFDSyBUTyBNQUlOIE1FTlUnKQ0KICAgIGxpbmV4KCkNCiAgICBzZWxlY3QgPSBpbnB1dChmJ3tHMX1be0F9P3tHNX1de0c1fSBDSE9JQ0Uge0F9OntHNX0gJykNCiAgICBpZiBzZWxlY3QgPT0nMSc6DQogICAgICAgIF9iZF8oKQ0KICAgIGVsaWYgc2VsZWN0ID09JzInOg0KICAgICAgICBfSW5kaWFfKCkNCiAgICBlbGlmIHNlbGVjdCA9PScwJzoNCiAgICAJbWVudSgpDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gVkFMSUQgT1BUSU9OJykNCiAgICAgICAgdGltZS5zbGVlcCgyKQ0KICAgICAgICBfcmFuZG1fKCkNCiNfX19fX19fX19fX19fX19fX19bIEJBTkdMQURFU0ggXV9fX19fX19fX19fX19fX19fXyMNCmRlZiBfYmRfKCk6DQogICAgY2xlYXIoKQ0KICAgIHByaW50KGYne0cxfVt7QX09e0cxfV17RzF9IEVYQU1QTEUge0F9OntHMX0gMDE3e0F9L3tHMX0wMTl7QX0ve0cxfTAxOHtBfS97RzF9MDE2Jyk7bGluZXgoKQ0KICAgIGNvZGUgPSBpbnB1dChmJ3tHMX1be0F9P3tHMn1de0cyfSBDSE9JQ0UgIHtBfTp7RzJ9ICcpDQogICAgbmFtZSA9ICcnLmpvaW4ocmFuZG9tLmNob2ljZShzdHJpbmcuZGlnaXRzKSBmb3IgXyBpbiByYW5nZSgyKSkNCiAgICBjb2QgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoMikpDQogICAgY2xlYXIoKQ0KICAgIHByaW50KGYne0cxfVt7QX09e0czfV17RzN9IEVYQU1QTEUge0F9OntHM30gMzAwMHtBfS97RzN9NTAwMHtBfS97RzN9MTAwMDB7QX0ve0czfTk5OTk5Jyk7bGluZXgoKQ0KICAgIGxpbWl0ID0gaW50KGlucHV0KGYne0cxfVt7QX0/e0c0fV17RzR9IENIT0lDRSAge0F9OntHNH0gJykpDQogICAgZm9yIHggaW4gcmFuZ2UobGltaXQpOg0KICAgICAgICBubXAgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoNCkpDQogICAgICAgIHVzZXIuYXBwZW5kKG5tcCkNCiAgICBjbGVhcigpDQogICAgd2l0aCBIYWJpYihtYXhfd29ya2Vycz0zMCkgYXMgc2V4eToNCiAgICAgICAgY2xlYXIoKQ0KICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHMX1de0cxfSBTSU0gQ09ERSAge0F9OntHMX0ge2NvZGV9JykNCiAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gVE9UQUwgVUlEIHtBfTp7RzJ9IHtzdHIobGVuKHVzZXIpKX0nKQ0KICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHM31de0czfSBUVVJOIHtHM31be0F9T057QX0ve0F9T0ZGe0czfV17RzN9IEFJUlBMQU5FIE1PREUgRVZFUlkge0F9M3tHM30gTUlOJyk7bGluZXgoKQ0KICAgICAgICBmb3IgbG92ZSBpbiB1c2VyOg0KICAgICAgICAgICAgaWRzID0gY29kZStuYW1lK2NvZCtsb3ZlDQogICAgICAgICAgICBwc2QgPSBbY29kZStuYW1lK2NvZCtsb3ZlLGNvZCtsb3ZlLG5hbWUrbG92ZSxjb2RlK25hbWUrY29kLCdiYW5nbGFkZXNoJywnQmFuZ2xhZGVzaCddDQogICAgICAgICAgICBzZXh5LnN1Ym1pdChyYW5kbSxpZHMscHNkKQ0KICAgIHByaW50KCcnKQ0KICAgIHByaW50KGYnXHJ7QX3ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAnKQ0KICAgIHByaW50KGYne0cxfVt7QX09e0cxfV17RzF9IFRIRSBQUk9DRVNTIEhBUyBCRUVOIENPTVBMRVRFRCcpDQogICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gVE9UQUwgT0sgSUQge0F9OntHMn0ge3N0cihsZW4ob2spKX0nKQ0KICAgIHByaW50KGYne0cxfVt7QX09e0czfV17RzN9IFRPVEFMIENQIElEIHtBfTp7RzN9IHtzdHIobGVuKGNwKSl9JykNCiAgICBwcmludChmJ1xye0F94pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAJykNCiAgICBpbnB1dChmJ3tHMX1be0F9PXtHNH1de0c0fSBQUkVTUyBFTlRFUiBUTyBCQUNLICcpDQogICAgbWVudSgpDQojX19fX19fX19fX19fX19fX19fWyBJTkRJQSBdX19fX19fX19fX19fX19fX19fIw0KZGVmIF9JbmRpYV8oKToNCiAgICBjbGVhcigpDQogICAgcHJpbnQoZid7RzF9W3tBfT17RzF9XXtHMX0gRVhBTVBMRSB7QX06e0cxfSArOTE2Mzl7QX0ve0cxfSs5MTkzNHtBfS97RzF9KzkxOTAye0F9L3tHMX0rOTE3MDEnKTtsaW5leCgpDQogICAgY29kZSA9IGlucHV0KGYne0cxfVt7QX0/e0cyfV17RzJ9IENIT0lDRSAge0F9OntHMn0gJykNCiAgICBjbGVhcigpDQogICAgcHJpbnQoZid7RzF9W3tBfT17RzN9XXtHM30gRVhBTVBMRSB7QX06e0czfSAzMDAwe0F9L3tHM301MDAwe0F9L3tHM30xMDAwMHtBfS97RzN9OTk5OTknKTtsaW5leCgpDQogICAgbGltaXQgPSBpbnQoaW5wdXQoZid7RzF9W3tBfT97RzR9XXtHNH0gQ0hPSUNFICB7QX06e0c0fSAnKSkNCiAgICBmb3IgeCBpbiByYW5nZShsaW1pdCk6DQogICAgICAgIG5tcCA9ICIiLiBqb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoNykpDQogICAgICAgIHVzZXIuYXBwZW5kKG5tcCkNCiAgICBjbGVhcigpDQogICAgd2l0aCBIYWJpYihtYXhfd29ya2Vycz0zMCkgYXMgc2V4eToNCiAgICAgICAgY2xlYXIoKQ0KICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHMX1de0cxfSBTSU0gQ09ERSAge0F9OntHMX0ge2NvZGV9JykNCiAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gVE9UQUwgVUlEIHtBfTp7RzJ9IHtzdHIobGVuKHVzZXIpKX0nKQ0KICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHM31de0czfSBUVVJOIHtHM31be0F9T057QX0ve0F9T0ZGe0czfV17RzN9IEFJUlBMQU5FIE1PREUgRVZFUlkge0F9M3tHM30gTUlOJyk7bGluZXgoKQ0KICAgICAgICBmb3IgbG92ZSBpbiB1c2VyOg0KICAgICAgICAgICAgaWRzID0gY29kZStsb3ZlDQogICAgICAgICAgICBwc2QgPSBbbG92ZSxpZHNbOjhdLCc1NzI3MzIwMCcsJzU5MDM5MjAwJywnNTc1NzU3NTEnXQ0KICAgICAgICAgICAgc2V4eS5zdWJtaXQocmFuZG0saWRzLHBzZCkNCiAgICBwcmludCgnJykNCiAgICBwcmludChmJ1xye0F94pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAJykNCiAgICBwcmludChmJ3tHMX1be0F9PXtHMX1de0cxfSBUSEUgUFJPQ0VTUyBIQVMgQkVFTiBDT01QTEVURUQnKQ0KICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IFRPVEFMIE9LIElEIHtBfTp7RzJ9IHtzdHIobGVuKG9rKSl9JykNCiAgICBwcmludChmJ3tHMX1be0F9PXtHM31de0czfSBUT1RBTCBDUCBJRCB7QX06e0czfSB7c3RyKGxlbihjcCkpfScpDQogICAgcHJpbnQoZidccntBfeKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQogICAgaW5wdXQoZid7RzF9W3tBfT17RzR9XXtHNH0gUFJFU1MgRU5URVIgVE8gQkFDSyAnKQ0KICAgIG1lbnUoKQ0KI19fX19fX19fX19fX19fX19fX1sgRklMRSBdX19fX19fX19fX19fX19fX19fIyAgICAgIA0KZGVmIF9maWxlXygpOg0KICAgIGdsb2JhbCBtZXRob2RzDQogICAgY2xlYXIoKQ0KICAgIHByaW50KGYne0cxfVt7QX0xe0cxfV17RzF9IE1FVEhPRCB7RzF9W3tBfU0xe0cxfV17RzF9ICcpDQogICAgcHJpbnQoZid7RzF9W3tBfTJ7RzJ9XXtHMn0gTUVUSE9EIHtHMn1be0F9TTJ7RzJ9XXtHMX0gJykNCiAgICBsaW5leCgpDQogICAgb3B0aW9uID0gaW5wdXQoZid7RzF9W3tBfT97RzN9XXtHM30gQ0hPSUNFIHtBfTp7RzN9ICcpDQogICAgaWYgb3B0aW9uID09JzEnOg0KICAgICAgICBtZXRob2RzLmFwcGVuZCgnbWV0aG9kQScpDQogICAgICAgIG1haW5fY3JhY2soKS5jcmFjayhpZCkNCiAgICBlbGlmIG9wdGlvbiA9PScyJzoNCiAgICAgICAgbWV0aG9kcy5hcHBlbmQoJ21ldGhvZEInKQ0KICAgICAgICBtYWluX2NyYWNrKCkuY3JhY2soaWQpDQogICAgZWxpZiBvcHRpb24gPT0nMCc6DQogICAgICAgIF9maWxlXygpDQogICAgZWxzZToNCiAgICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IFZBTElEIE9QVElPTicpDQogICAgICB0aW1lLnNsZWVwKDIpDQogICAgICBfZmlsZV8oKQ0KDQpjbGFzcyBtYWluX2NyYWNrKCk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgICAgICBzZWxmLmlkPVtdDQogICAgZGVmIGNyYWNrKHNlbGYsaWQpOg0KICAgICAgICBnbG9iYWwgbWV0aG9kcw0KICAgICAgICBjbGVhcigpDQogICAgICAgIHByaW50KGYne0cxfVt7QX09e0cxfV17RzF9IEVYQU1QTEUge0F9OntHMX0gL3NkY2FyZC9MVUZGWS50eHQnKTtsaW5leCgpDQogICAgICAgIHNlbGYuZmlsZSA9IGlucHV0KGYne0cxfVt7QX0/e0cyfV17RzJ9IEZJTEUgTkFNRSB7QX06e0cyfSAnKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBzZWxmLmlkID0gb3BlbihzZWxmLmZpbGUpLnJlYWQoKS5zcGxpdGxpbmVzKCkNCiAgICAgICAgICAgIHNlbGYucGFzdygpDQogICAgICAgIGV4Y2VwdCBGaWxlTm90Rm91bmRFcnJvcjoNCiAgICAgICAgICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IE9QUFMgRklMRSBOT1QgRk9VTkQgLi4uJykNCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMikNCiAgICAgICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQ0KICAgICAgICAgICAgcHJpbnQobG9nbykNCiAgICAgICAgICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IFRSWSBBR0FJTiAuLi4nKQ0KICAgICAgICAgICAgdGltZS5zbGVlcCgyKQ0KICAgICAgICAgICAgbWFpbl9jcmFjaygpLmNyYWNrKGlkKQ0KI19fX19fX19fX19fX19fX19fX1sgRklMRSBNRVRIT0QgTTEgXV9fX19fX19fX19fX19fX19fXyMgICAgICAgICAgIA0KICAgIGRlZiBtZXRob2RBKHNlbGYsIHNpZCwgbmFtZSwgcHN3KToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgZ2xvYmFsIG9rcyxjcHMsbG9vcA0KICAgICAgICAgICAgdWEgID0gIltGQkFOL0ZCNEE7RkJBVi8iK3N0cihyYW5kb20ucmFuZGludCgxMSw3NykpKycuMC4wLicrc3RyKHJhbmRvbS5yYW5kcmFuZ2UoOSw0OSkpK3N0cihyYW5kb20ucmFuZGludCgxMSw3NykpICsiO0ZCQlYvIitzdHIocmFuZG9tLnJhbmRpbnQoMTExMTExMSw3Nzc3Nzc3KSkrIjsnW0ZCNEEvO0ZCQVYvO0ZCQlYvMzc1MTkzMjUzO0ZCQU4vRkI0QTtGQkFWLztGQkJWLzM3NTE5MzI1MztGQkRNLy8qe2RlbnNpdHk9Mi41LHdpZHRoPTcyMCxoZWlnaHQ9MTkyMH07RkJMQy9qYV9KUDtGQlJWLzcwMTc1MjA0MTtGQkNSL1JlYWxtZTtGQk1GL01vdG9yb2xhO0ZCQkQvSHVhd2VpO0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkRWL05va2lhX1gxNzA7RkJTVi8xNDtGQk9QLzU7RkJDQS94ODY7RkJTUy87XSI7IltGQjRBLztGQkFWL0ExWERMNVU0O0ZCQlYvMTg4NDY0MDYwO0ZCQU4vRkI0QTtGQkFWL0ExWERMNVU0O0ZCQlYvMTg4NDY0MDYwO0ZCRE0vLyp7ZGVuc2l0eT0xLjUsd2lkdGg9MTA4MCxoZWlnaHQ9NDA5Nn07RkJMQy9kZV9ERTtGQlJWLzY5NTYxNjI1NTtGQkNSL05va2lhO0ZCTUYvT25lUGx1cztGQkJEL0cnRml2ZTtGQlBOL2NvbS5mYWNlYm9vay5rYXRhbmE7RkJEVi9NaV8xMTtGQlNWLzEzO0ZCT1AvNDtGQkNBL3g4Nl82NDtGQlNTLzEyO10iOyJbRkJBTi87RkJBVi9ZWldTRVM5MztGQkJWLzIyNDE3NjIyMDtGQkFOL0ZCQU47RkJBVi9ZWldTRVM5MztGQkJWLzIyNDE3NjIyMDtGQkRNLy8qe2RlbnNpdHk9Mi4wLHdpZHRoPTE0NDAsaGVpZ2h0PTE5MjB9O0ZCTEMvZXNfRVM7RkJSVi82ODU5MzMwNzI7RkJDUi9Tb255O0ZCTUYvTW90b3JvbGE7RkJCRC9Tb255O0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkRWL1JlZG1pX05vdGVfOTtGQlNWLzE0O0ZCT1AvNztGQkNBL2FybWVhYmktdjdhO0ZCU1MvMjA7XSI7IltGQjRBLztGQkFWL0ExWERMNVU0O0ZCQlYvNDI1NDkwNzA3O0ZCQU4vRkI0QTtGQkFWL0ExWERMNVU0O0ZCQlYvNDI1NDkwNzA3O0ZCRE0vLyp7ZGVuc2l0eT0yLjAsd2lkdGg9NzIwLGhlaWdodD0yNTYwfTtGQkxDL3J1X1JVO0ZCUlYvODE4NTIxODg4O0ZCQ1IvVEVDTk87RkJNRi9WSVZPO0ZCQkQvVm9pY2UgTW9iaWxlO0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkRWL01vdG9yb2xhX01vdG9fRzUwMDtGQlNWLzEyO0ZCT1AvNjtGQkNBL3g4Nl82NDtGQlNTLzE3O10iOyJbRkJBTi87RkJBVi87RkJCVi82MDgyNDQxNDY7RkJBTi9GQkFOO0ZCQVYvO0ZCQlYvNjA4MjQ0MTQ2O0ZCRE0vLyp7ZGVuc2l0eT0zLjAsd2lkdGg9MTA4MCxoZWlnaHQ9MTI4MH07RkJMQy9ydV9SVTtGQlJWLzg1NTI2MjA1NTtGQkNSL1Nvbnk7RkJNRi9YaWFvbWk7RkJCRC9LeW9jZXJhO0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkRWL1NhbXN1bmdfR2FsYXh5X0E2MjtGQlNWLzExO0ZCT1AvNjtGQkNBL2FybTY0LXY4YTtGQlNTLzE0O10iOyJbRkJBTi87RkJBVi87RkJCVi82MzcxNTcwNjE7RkJBTi9GQkFOO0ZCQVYvO0ZCQlYvNjM3MTU3MDYxO0ZCRE0vLyp7ZGVuc2l0eT0xLjUsd2lkdGg9MTQ0MCxoZWlnaHQ9MTkyMH07RkJMQy9kZV9ERTtGQlJWLzE5NjQ5NTk5NTtGQkNSL0xHO0ZCTUYvVklWTztGQkJEL01lZGlvbjtGQlBOL2NvbS5mYWNlYm9vay5rYXRhbmE7RkJEVi9TYW1zdW5nX0dhbGF4eV9BNzI7RkJTVi8xMjtGQk9QLzc7RkJDQS9hcm02NC12OGE7RkJTUy8xMDtdIjsiW0ZCQU4vO0ZCQVYvNFEwOTVNUUc7RkJCVi85OTEyMTI0MTY7RkJBTi9GQkFOO0ZCQVYvNFEwOTVNUUc7RkJCVi85OTEyMTI0MTY7RkJETS8vKntkZW5zaXR5PTIuMCx3aWR0aD0xMDgwLGhlaWdodD0yNTYwfTtGQkxDL2l0X0lUO0ZCUlYvMTA2OTIwMjAyO0ZCQ1IvVEVDTk87RkJNRi9Nb3Rvcm9sYTtGQkJEL0hNRF9HbG9iYWw7RkJQTi9jb20uZmFjZWJvb2sua2F0YW5hO0ZCRFYvU29ueV9YcGVyaWFfMV9JVjtGQlNWLzE2O0ZCT1AvNjtGQkNBL2FybWVhYmktdjdhO0ZCU1MvO10iOyJbRkJBTi87RkJBVi9ZWldTRVM5MztGQkJWLzY3NDMzMzYyOTtGQkFOL0ZCQU47RkJBVi9ZWldTRVM5MztGQkJWLzY3NDMzMzYyOTtGQkRNLy8qe2RlbnNpdHk9Mi4wLHdpZHRoPTcyMCxoZWlnaHQ9MTkyMH07RkJMQy96aF9DTjtGQlJWLzg1MjMwNDk5MjtGQkNSL1Nvbnk7RkJNRi9Nb3Rvcm9sYTtGQkJEL09wcG87RkJQTi9jb20uZmFjZWJvb2sua2F0YW5hO0ZCRFYvTEdfUTE0O0ZCU1YvMTc7RkJPUC82O0ZCQ0EveDg2XzY0O0ZCU1MvMTY7XSIgDQogICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGYiXHJ7RzF9W3tBfUxVRkZZLU0xe0cxfV17QX0te0cxfVt7QX17bG9vcH17RzF9XXtBfS17RzF9W3tBfU9Le0cxfS97QX1DUHtHMX1de0F9LXtHMX1be0F9e2xlbihva3MpfXtHMX0ve0F9e2xlbihjcHMpfXtHMX1dICIpDQogICAgICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgICAgIGZzID0gbmFtZS5zcGxpdCgnICcpWzBdDQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgbHMgPSBuYW1lLnNwbGl0KCcgJylbMV0NCiAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICBscyA9IGZzDQogICAgICAgICAgICBmb3IgcHcgaW4gcHN3Og0KICAgICAgICAgICAgICAgIHBzID0gcHcucmVwbGFjZSgnZmlyc3QnLGZzLmxvd2VyKCkpLnJlcGxhY2UoJ0ZpcnN0JyxmcykucmVwbGFjZSgnbGFzdCcsbHMubG93ZXIoKSkucmVwbGFjZSgnTGFzdCcsbHMpLnJlcGxhY2UoJ05hbWUnLG5hbWUpLnJlcGxhY2UoJ25hbWUnLG5hbWUubG93ZXIoKSkNCiAgICAgICAgICAgICAgICB3aXRoIHJlcXVlc3RzLlNlc3Npb24oKSBhcyBzZXNzaW9uOg0KICAgICAgICAgICAgICAgICAgICBkYXRhID0geyJhZGlkIjogc3RyKHV1aWQudXVpZDQoKSksDQogICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAianNvbiIsDQogICAgICAgICAgICAgICAgICAgICJkZXZpY2VfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwNCiAgICAgICAgICAgICAgICAgICAgImNwbCI6ICJ0cnVlIiwNCiAgICAgICAgICAgICAgICAgICAgImZhbWlseV9kZXZpY2VfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwNCiAgICAgICAgICAgICAgICAgICAgImNyZWRlbnRpYWxzX3R5cGUiOiAiZGV2aWNlX2Jhc2VkX2xvZ2luX3Bhc3N3b3JkIiwNCiAgICAgICAgICAgICAgICAgICAgImVycm9yX2RldGFpbF90eXBlIjogImJ1dHRvbl93aXRoX2Rpc2FibGVkIiwNCiAgICAgICAgICAgICAgICAgICAgInNvdXJjZSI6ICJkZXZpY2VfYmFzZWRfbG9naW4iLA0KICAgICAgICAgICAgICAgICAgICAiZW1haWwiOiBzaWQsDQogICAgICAgICAgICAgICAgICAgICJwYXNzd29yZCI6IHBzLA0KICAgICAgICAgICAgICAgICAgICAiYWNjZXNzX3Rva2VuIjogIjM1MDY4NTUzMTcyOCU3QzYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyIiwNCiAgICAgICAgICAgICAgICAgICAgImdlbmVyYXRlX3Nlc3Npb25fY29va2llcyI6ICIxIiwNCiAgICAgICAgICAgICAgICAgICAgIm1ldGFfaW5mX2ZibWV0YSI6ICIiLA0KICAgICAgICAgICAgICAgICAgICAiYWR2ZXJ0aXNlcl9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLA0KICAgICAgICAgICAgICAgICAgICAiY3VycmVudGx5X2xvZ2dlZF9pbl91c2VyaWQiOiAiMCIsDQogICAgICAgICAgICAgICAgICAgICJsb2NhbGUiOiAiZW5fR0IiLA0KICAgICAgICAgICAgICAgICAgICAiY2xpZW50X2NvdW50cnlfY29kZSI6ICJHQiIsDQogICAgICAgICAgICAgICAgICAgICJtZXRob2QiOiAiYXV0aC5sb2dpbiIsDQogICAgICAgICAgICAgICAgICAgICJmYl9hcGlfcmVxX2ZyaWVuZGx5X25hbWUiOiAiYXV0aGVudGljYXRlIiwNCiAgICAgICAgICAgICAgICAgICAgImZiX2FwaV9jYWxsZXJfY2xhc3MiOiAiY29tLmZhY2Vib29rLmFjY291bnQubG9naW4ucHJvdG9jb2wuRmI0YUF1dGhIYW5kbGVyIiwNCiAgICAgICAgICAgICAgICAgICAgImFwaV9rZXkiOiAiODgyYTg0OTAzNjFkYTk4NzAyYmY5N2EwMjFkZGMxNGQifQ0KICAgICAgICAgICAgICAgIGhlYWRlcnMgPSB7J1VzZXItQWdlbnQnOiAnW0ZCQU4vO0ZCQVYvNFEwOTVNUUc7RkJCVi83ODMzMjk0NzY7RkJBTi9GQkFOO0ZCQVYvNFEwOTVNUUc7RkJCVi83ODMzMjk0NzY7RkJETS8vKntkZW5zaXR5PTMuMCx3aWR0aD03MjAsaGVpZ2h0PTEyODB9O0ZCTEMvZGVfREU7RkJSVi84Njc2Mzk5MDQ7RkJDUi9SZWFsbWU7RkJNRi9WSVZPO0ZCQkQvTGVub3ZvO0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkRWL1hpYW9taV9NaV9NaXhfMTI7RkJTVi8xNjtGQk9QLzc7RkJDQS9hcm02NC12OGE7RkJTUy8xMTtdJywNCiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLA0KICAgICAgICAgICAgICAgICAgICAnSG9zdCc6ICdncmFwaC5mYWNlYm9vay5jb20nLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1OZXQtSE5JJzogc3RyKHJhbmRvbS5yYW5kaW50KDIwMDAwLCA0MDAwMCkpLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1TSU0tSE5JJzogc3RyKHJhbmRvbS5yYW5kaW50KDIwMDAwLCA0MDAwMCkpLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1Db25uZWN0aW9uLVR5cGUnOiAnTU9CSUxFLkxURScsDQogICAgICAgICAgICAgICAgICAgICdYLVRpZ29uLUlzLVJldHJ5JzogJ0ZhbHNlJywNCiAgICAgICAgICAgICAgICAgICAgJ3gtZmItc2Vzc2lvbi1pZCc6ICduaWQ9amlaK3lOTkJnYndDO3BpZD1NYWluO3RpZD0xMzI7bmM9MTtmYz0wO2JjPTA7Y2lkPWQyOWQ2N2QzN2VjYTM4NzQ4MmE4YTViNzQwZjg0ZjYyJywNCiAgICAgICAgICAgICAgICAgICAgJ3gtZmItZGV2aWNlLWdyb3VwJzogJzUxMjAnLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1GcmllbmRseS1OYW1lJzogJ1ZpZXdlclJlYWN0aW9uc011dGF0aW9uJywNCiAgICAgICAgICAgICAgICAgICAgJ1gtRkItUmVxdWVzdC1BbmFseXRpY3MtVGFncyc6ICdncmFwaHNlcnZpY2UnLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1IVFRQLUVuZ2luZSc6ICdMaWdlcicsDQogICAgICAgICAgICAgICAgICAgICdYLUZCLUNsaWVudC1JUCc6ICdUcnVlJywNCiAgICAgICAgICAgICAgICAgICAgJ1gtRkItU2VydmVyLUNsdXN0ZXInOiAnVHJ1ZScsDQogICAgICAgICAgICAgICAgICAgICd4LWZiLWNvbm5lY3Rpb24tdG9rZW4nOiAnZDI5ZDY3ZDM3ZWNhMzg3NDgyYThhNWI3NDBmODRmNjInLH0NCiAgICAgICAgICAgICAgICBxID0gc2Vzc2lvbi5wb3N0KCJodHRwczovL2ItZ3JhcGguZmFjZWJvb2suY29tL2F1dGgvbG9naW4iLGRhdGE9ZGF0YSwgaGVhZGVycz1oZWFkZXJzLCBhbGxvd19yZWRpcmVjdHM9RmFsc2UpLmpzb24oKQ0KICAgICAgICAgICAgICAgIGlmICdzZXNzaW9uX2tleScgaW4gcToNCiAgICAgICAgICAgICAgICAgICAgY2trayA9ICI7Ii5qb2luKGlbIm5hbWUiXSsiPSIraVsidmFsdWUiXSBmb3IgaSBpbiBxWyJzZXNzaW9uX2Nvb2tpZXMiXSk7c3dhZ2IgPSBiYXNlNjQuYjY0ZW5jb2RlKG9zLnVyYW5kb20oMTgpKS5kZWNvZGUoKS5yZXBsYWNlKCI9IiwiIikucmVwbGFjZSgiKyIsIl8iKS5yZXBsYWNlKCIvIiwiLSIpO2Nvb2tpZSA9IGYic2I9e3N3YWdifTt7Y2tra30iDQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiXHJccntHMX1bTFVGRlktT0tdIHtzaWR9IHwge3BzfSAiKQ0KICAgICAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL0xVRkZZLU0xLUZJTEUtT0sudHh0JywnYScpLndyaXRlKHNpZCsnfCcrcHMrJ3wnK2Nvb2tpZSsnXG4nKQ0KICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHNpZCkNCiAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBxWydlcnJvciddWydtZXNzYWdlJ106DQogICAgICAgICAgICAgICAgICAgICBwcmludChmIlxyXHJ7TX1bTFVGRlktQ1BdIHtzaWR9IHwge3BzfSAiKQ0KICAgICAgICAgICAgICAgICAgICAgb3BlbignL3NkY2FyZC9MVUZGWS1NMi1GSUxFLU9LLnR4dCcsJ2EnKS53cml0ZShzaWQrJ3wnK3BzKydcbicpDQogICAgICAgICAgICAgICAgICAgICBjcHMuYXBwZW5kKHNpZCkNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgbG9vcCs9MQ0KICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQogICAgICAgICAgICBzZWxmLm1ldGhvZEEoc2lkLCBuYW1lLCBwcykNCiNfX19fX19fX19fX19fX19fX19bIEZJTEUgTUVUSE9EIE0yIF1fX19fX19fX19fX19fX19fX18jICAgICAgICAgICAgIA0KICAgIGRlZiBtZXRob2RCKHNlbGYsIHNpZCwgbmFtZSwgcHN3KToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgZ2xvYmFsIG9rcyxjcHMsbG9vcA0KICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZShmIlxye0cxfVt7QX1MVUZGWS1NMntHMX1de0F9LXtHMX1be0F9e2xvb3B9e0cxfV17QX0te0cxfVt7QX1PS3tHMX0ve0F9Q1B7RzF9XXtBfS17RzF9W3tBfXtsZW4ob2tzKX17RzF9L3tBfXtsZW4oY3BzKX17RzF9XSAiKQ0KICAgICAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgICAgICBmcyA9IG5hbWUuc3BsaXQoJyAnKVswXQ0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGxzID0gbmFtZS5zcGxpdCgnICcpWzFdDQogICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgbHMgPSBmcw0KICAgICAgICAgICAgZm9yIHB3IGluIHBzdzoNCiAgICAgICAgICAgICAgICBwcyA9IHB3LnJlcGxhY2UoJ2ZpcnN0Jyxmcy5sb3dlcigpKS5yZXBsYWNlKCdGaXJzdCcsZnMpLnJlcGxhY2UoJ2xhc3QnLGxzLmxvd2VyKCkpLnJlcGxhY2UoJ0xhc3QnLGxzKS5yZXBsYWNlKCdOYW1lJyxuYW1lKS5yZXBsYWNlKCduYW1lJyxuYW1lLmxvd2VyKCkpDQogICAgICAgICAgICAgICAgd2l0aCByZXF1ZXN0cy5TZXNzaW9uKCkgYXMgc2Vzc2lvbjoNCiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHsiYWRpZCI6IHN0cih1dWlkLnV1aWQ0KCkpLA0KICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IjogImpzb24iLA0KICAgICAgICAgICAgICAgICAgICAiZGV2aWNlX2lkIjogc3RyKHV1aWQudXVpZDQoKSksDQogICAgICAgICAgICAgICAgICAgICJjcGwiOiAidHJ1ZSIsDQogICAgICAgICAgICAgICAgICAgICJmYW1pbHlfZGV2aWNlX2lkIjogc3RyKHV1aWQudXVpZDQoKSksDQogICAgICAgICAgICAgICAgICAgICJjcmVkZW50aWFsc190eXBlIjogImRldmljZV9iYXNlZF9sb2dpbl9wYXNzd29yZCIsDQogICAgICAgICAgICAgICAgICAgICJlcnJvcl9kZXRhaWxfdHlwZSI6ICJidXR0b25fd2l0aF9kaXNhYmxlZCIsDQogICAgICAgICAgICAgICAgICAgICJzb3VyY2UiOiAiZGV2aWNlX2Jhc2VkX2xvZ2luIiwNCiAgICAgICAgICAgICAgICAgICAgImVtYWlsIjogc2lkLA0KICAgICAgICAgICAgICAgICAgICAicGFzc3dvcmQiOiBwcywNCiAgICAgICAgICAgICAgICAgICAgImFjY2Vzc190b2tlbiI6ICIzNTA2ODU1MzE3MjglN0M2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMiIsDQogICAgICAgICAgICAgICAgICAgICJnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXMiOiAiMSIsDQogICAgICAgICAgICAgICAgICAgICJtZXRhX2luZl9mYm1ldGEiOiAiIiwNCiAgICAgICAgICAgICAgICAgICAgImFkdmVydGlzZXJfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwNCiAgICAgICAgICAgICAgICAgICAgImN1cnJlbnRseV9sb2dnZWRfaW5fdXNlcmlkIjogIjAiLA0KICAgICAgICAgICAgICAgICAgICAibG9jYWxlIjogImVuX0dCIiwNCiAgICAgICAgICAgICAgICAgICAgImNsaWVudF9jb3VudHJ5X2NvZGUiOiAiR0IiLA0KICAgICAgICAgICAgICAgICAgICAibWV0aG9kIjogImF1dGgubG9naW4iLA0KICAgICAgICAgICAgICAgICAgICAiZmJfYXBpX3JlcV9mcmllbmRseV9uYW1lIjogImF1dGhlbnRpY2F0ZSIsDQogICAgICAgICAgICAgICAgICAgICJmYl9hcGlfY2FsbGVyX2NsYXNzIjogImNvbS5mYWNlYm9vay5hY2NvdW50LmxvZ2luLnByb3RvY29sLkZiNGFBdXRoSGFuZGxlciIsDQogICAgICAgICAgICAgICAgICAgICJhcGlfa2V5IjogIjg4MmE4NDkwMzYxZGE5ODcwMmJmOTdhMDIxZGRjMTRkIn0NCiAgICAgICAgICAgICAgICBoZWFkZXJzID0geydVc2VyLUFnZW50JzogJ1tGQkFOLztGQkFWLzRRMDk1TVFHO0ZCQlYvNzgzMzI5NDc2O0ZCQU4vRkJBTjtGQkFWLzRRMDk1TVFHO0ZCQlYvNzgzMzI5NDc2O0ZCRE0vLyp7ZGVuc2l0eT0zLjAsd2lkdGg9NzIwLGhlaWdodD0xMjgwfTtGQkxDL2RlX0RFO0ZCUlYvODY3NjM5OTA0O0ZCQ1IvUmVhbG1lO0ZCTUYvVklWTztGQkJEL0xlbm92bztGQlBOL2NvbS5mYWNlYm9vay5rYXRhbmE7RkJEVi9YaWFvbWlfTWlfTWl4XzEyO0ZCU1YvMTY7RkJPUC83O0ZCQ0EvYXJtNjQtdjhhO0ZCU1MvMTE7XScsDQogICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywNCiAgICAgICAgICAgICAgICAgICAgJ0hvc3QnOiAnZ3JhcGguZmFjZWJvb2suY29tJywNCiAgICAgICAgICAgICAgICAgICAgJ1gtRkItTmV0LUhOSSc6IHN0cihyYW5kb20ucmFuZGludCgyMDAwMCwgNDAwMDApKSwNCiAgICAgICAgICAgICAgICAgICAgJ1gtRkItU0lNLUhOSSc6IHN0cihyYW5kb20ucmFuZGludCgyMDAwMCwgNDAwMDApKSwNCiAgICAgICAgICAgICAgICAgICAgJ1gtRkItQ29ubmVjdGlvbi1UeXBlJzogJ01PQklMRS5MVEUnLA0KICAgICAgICAgICAgICAgICAgICAnWC1UaWdvbi1Jcy1SZXRyeSc6ICdGYWxzZScsDQogICAgICAgICAgICAgICAgICAgICd4LWZiLXNlc3Npb24taWQnOiAnbmlkPWppWit5Tk5CZ2J3QztwaWQ9TWFpbjt0aWQ9MTMyO25jPTE7ZmM9MDtiYz0wO2NpZD1kMjlkNjdkMzdlY2EzODc0ODJhOGE1Yjc0MGY4NGY2MicsDQogICAgICAgICAgICAgICAgICAgICd4LWZiLWRldmljZS1ncm91cCc6ICc1MTIwJywNCiAgICAgICAgICAgICAgICAgICAgJ1gtRkItRnJpZW5kbHktTmFtZSc6ICdWaWV3ZXJSZWFjdGlvbnNNdXRhdGlvbicsDQogICAgICAgICAgICAgICAgICAgICdYLUZCLVJlcXVlc3QtQW5hbHl0aWNzLVRhZ3MnOiAnZ3JhcGhzZXJ2aWNlJywNCiAgICAgICAgICAgICAgICAgICAgJ1gtRkItSFRUUC1FbmdpbmUnOiAnTGlnZXInLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1DbGllbnQtSVAnOiAnVHJ1ZScsDQogICAgICAgICAgICAgICAgICAgICdYLUZCLVNlcnZlci1DbHVzdGVyJzogJ1RydWUnLA0KICAgICAgICAgICAgICAgICAgICAneC1mYi1jb25uZWN0aW9uLXRva2VuJzogJ2QyOWQ2N2QzN2VjYTM4NzQ4MmE4YTViNzQwZjg0ZjYyJyx9DQogICAgICAgICAgICAgICAgcSA9IHNlc3Npb24ucG9zdCgiaHR0cHM6Ly9iLWdyYXBoLmZhY2Vib29rLmNvbS9hdXRoL2xvZ2luIixkYXRhPWRhdGEsIGhlYWRlcnM9aGVhZGVycywgYWxsb3dfcmVkaXJlY3RzPUZhbHNlKS5qc29uKCkNCiAgICAgICAgICAgICAgICBpZiAnc2Vzc2lvbl9rZXknIGluIHE6DQogICAgICAgICAgICAgICAgICAgIGNra2sgPSAiOyIuam9pbihpWyJuYW1lIl0rIj0iK2lbInZhbHVlIl0gZm9yIGkgaW4gcVsic2Vzc2lvbl9jb29raWVzIl0pO3N3YWdiID0gYmFzZTY0LmI2NGVuY29kZShvcy51cmFuZG9tKDE4KSkuZGVjb2RlKCkucmVwbGFjZSgiPSIsIiIpLnJlcGxhY2UoIisiLCJfIikucmVwbGFjZSgiLyIsIi0iKTtjb29raWUgPSBmInNiPXtzd2FnYn07e2Nra2t9Ig0KICAgICAgICAgICAgICAgICAgICBwcmludChmIlxyXHJ7RzF9W0xVRkZZLU9LXSB7c2lkfSB8IHtwc30gIikNCiAgICAgICAgICAgICAgICAgICAgb3BlbignL3NkY2FyZC9MVUZGWS1NMi1GSUxFLU9LLnR4dCcsJ2EnKS53cml0ZShzaWQrJ3wnK3BzKyd8Jytjb29raWUrJ1xuJykNCiAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZChzaWQpDQogICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcVsnZXJyb3InXVsnbWVzc2FnZSddOg0KICAgICAgICAgICAgICAgICAgICBwcmludChmIlxyXHJ7TX1bTFVGRlktQ1BdIHtzaWR9IHwge3BzfSAiKQ0KICAgICAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL0xVRkZZLU0yLUZJTEUtT0sudHh0JywnYScpLndyaXRlKHNpZCsnfCcrcHMrJ1xuJykNCiAgICAgICAgICAgICAgICAgICAgY3BzLmFwcGVuZChzaWQpDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIGxvb3ArPTENCiAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOg0KICAgICAgICAgICAgc2VsZi5tZXRob2RDKHNpZCwgbmFtZSwgcHMpDQojX19fX19fX19fX19fX19fX19fWyBQQVNTV09SRCBdX19fX19fX19fX19fX19fX19fIw0KICAgIGRlZiBwYXN3KHNlbGYpOiAgICAgICANCiAgICAgICAgICAgIHB3ID0gW10NCiAgICAgICAgICAgIGNsZWFyKCkNCiAgICAgICAgICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IEVYQU1QTEUge0F9OntHMn0gQkQgMTAtMTgvSU5ESUEgMy01Jyk7bGluZXgoKQ0KICAgICAgICAgICAgc2wgPSBpbnQoaW5wdXQoZid7RzF9W3tBfT97RzN9XXtHM30gUEFTU1dPUkQgTElNSVQge0F9OntHM30gJykpDQogICAgICAgICAgICBjbGVhcigpDQogICAgICAgICAgICBwcmludChmJ3tHMX1be0F9P3tHNH1de0c0fSBFWEFNUExFIHtBfTp7RzR9IGZpcnN0MTIzL2ZpcnN0bGFzdC9maXJzdEBAQCcpDQogICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICBpZiBzbCA9PScnOg0KICAgICAgICAgICAgICAgIHByaW50KGYne0cxfVt7QX09e0c1fV17RzV9IFBVVCBMSU1JVCBCRVRXRUVOIDEgVE8gMzAnKQ0KICAgICAgICAgICAgZWxpZiBzbCA+IDIwOg0KICAgICAgICAgICAgICAgIHByaW50KGYne0cxfVt7QX09e0cxfV17RzF9IFBBU1NXT1JEIExJTUlUIFNIT1VMRCBOT1QgQkUgR1JFQVRFUiBUSEFOIDMwJykNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgZm9yIHNyIGluIHJhbmdlKHNsKToNCiAgICAgICAgICAgICAgICAgICAgcHcuYXBwZW5kKGlucHV0KGYne0cxfVt7QX09e0cxfV17RzF9IFBBU1NXT1JEIE5PIHtHMX1be0F9e3NyKzF9e0cxfV0ge0F9OntHMX0gJykpDQogICAgICAgICAgICBjbGVhcigpDQogICAgICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHMX1de0cxfSBUT1RBTCBGSUxFIFVJRCB7QX06e0cxfSAlcyAnICUgbGVuKHNlbGYuaWQpKQ0KICAgICAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gUEFTU1dPUkQgTElNSVQge0F9OntHMX0ge3NsfSAnKQ0KICAgICAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzN9XXtHM30gVFVSTiB7RzN9W3tBfU9Oe0F9L3tBfU9GRntHM31de0czfSBBSVJQTEFORSBNT0RFIEVWRVJZIHtBfTN7RzN9IE1JTicpDQogICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICB3aXRoIEhhYmliKG1heF93b3JrZXJzPTMwKSBhcyBzd2Fnd29ybGQ6DQogICAgICAgICAgICAgICAgZm9yIHpzYiBpbiBzZWxmLmlkOg0KICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgdWlkLCBuYW1lID0genNiLnNwbGl0KCd8JykNCiAgICAgICAgICAgICAgICAgICAgICAgc3ogPSBuYW1lLnNwbGl0KCcgJykNCiAgICAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHN6KSA9PSAzIG9yIGxlbihzeikgPT0gNCBvciBsZW4oc3opID09IDUgb3IgbGVuKHN6KSA9PSA4Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgcHd4ID0gIHB3DQogICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHd4ID0gIHB3DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ21ldGhvZEEnIGluIG1ldGhvZHM6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3YWd3b3JsZC5zdWJtaXQoc2VsZi5tZXRob2RBLCB1aWQsIG5hbWUsIHB3eCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmICdtZXRob2RCJyBpbiBtZXRob2RzOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2Fnd29ybGQuc3VibWl0KHNlbGYubWV0aG9kQiwgdWlkLCBuYW1lLCBwd3gpDQogICAgICAgICAgICAgICAgICAgZXhjZXB0OnBhc3MNCiAgICAgICAgICAgIHJlc3VsdChva3MsY3BzKQ0KI19fX19fX19fX19fX19fX19fX1sgUkFORE9NIE1FVEhPRCBdX19fX19fX19fX19fX19fX19fIw0KZGVmIHJhbmRtKGlkcyxwc2QpOg0KICAgIGdsb2JhbCBsb29wLG9rLGNwDQogICAgc3lzLnN0ZG91dC53cml0ZShmIlxye0cxfVt7QX1MVUZGWS1FTVJBTntHMX1de0F9LXtHMX1be0F9e2xvb3B9e0cxfV17QX0te0cxfVt7QX1PS3tHMX0ve0F9Q1B7RzF9XXtBfS17RzF9W3tBfXtsZW4ob2spfXtHMX0ve0F9e2xlbihjcCl9e0cxfV0gIikNCiAgICBzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICB0cnk6DQogICAgICAgIGZvciBwYXMgaW4gcHNkOg0KICAgICAgICAgICAgZGF0YT17J2FkaWQnOnN0cih1dWlkLnV1aWQ0KCkpLA0KICAgICAgICAgICAgJ2Zvcm1hdCc6J2pzb24nLA0KICAgICAgICAgICAgJ2RldmljZV9pZCc6c3RyKHV1aWQudXVpZDQoKSksDQogICAgICAgICAgICAnZW1haWwnOmlkcywNCiAgICAgICAgICAgICdwYXNzd29yZCc6cGFzLA0KICAgICAgICAgICAgJ2dlbmVyYXRlX2FuYWx5dGljc19jbGFpbXMnOicxJywNCiAgICAgICAgICAgICdjb21tdW5pdHlfaWQnOicnLA0KICAgICAgICAgICAgJ2NwbCc6J3RydWUnLCd0cnlfbnVtJzonMScsDQogICAgICAgICAgICAnZmFtaWx5X2RldmljZV9pZCc6c3RyKHV1aWQudXVpZDQoKSksDQogICAgICAgICAgICAnY3JlZGVudGlhbHNfdHlwZSc6J3Bhc3N3b3JkJywNCiAgICAgICAgICAgICdzb3VyY2UnOidsb2dpbicsDQogICAgICAgICAgICAnZXJyb3JfZGV0YWlsX3R5cGUnOididXR0b25fd2l0aF9kaXNhYmxlZCcsDQogICAgICAgICAgICAnZW5yb2xsX21pc2F1dGgnOidmYWxzZScsDQogICAgICAgICAgICAnZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzJzonMScsDQogICAgICAgICAgICAnZ2VuZXJhdGVfbWFjaGluZV9pZCc6JzEnLA0KICAgICAgICAgICAgJ2N1cnJlbnRseV9sb2dnZWRfaW5fdXNlcmlkJzonMCcsDQogICAgICAgICAgICAnbG9jYWxlJzonZW5fVVMnLA0KICAgICAgICAgICAgJ2NsaWVudF9jb3VudHJ5X2NvZGUnOidVUycsDQogICAgICAgICAgICAnZmJfYXBpX3JlcV9mcmllbmRseV9uYW1lJzonYXV0aGVudGljYXRlJywNCiAgICAgICAgICAgICdhcGlfa2V5JzonNjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInLA0KICAgICAgICAgICAgJ2FjY2Vzc190b2tlbic6JzM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMid9DQogICAgICAgICAgICBoZWFkPXsnVXNlci1BZ2VudCc6ICdbRkJBTi9GQjRBO0ZCQVYvMzA1LjEuMC40MC4xMjA7RkJCVi8yNzI0MDEyMDk7RkJETS97ZGVuc2l0eT0yLjAsd2lkdGg9NzIwLGhlaWdodD0xNDU2fTtGQkxDL2l0X0lUO0ZCUlYvMjczNDc0MTE4O0ZCQ1IvSSBUSU07RkJNRi9PUFBPO0ZCQkQvT1BQTztGQlBOL2NvbS5mYWNlYm9vay5rYXRhbmE7RkJEVi9DUEgxOTMxO0ZCU1YvMTA7RkJCSy8xO0ZCT1AvMTtGQkNBL2FybTY0LXY4YTo7XScsDQogICAgICAgICAgICAnQWNjZXB0LUVuY29kaW5nJzonZ3ppcCwgZGVmbGF0ZScsDQogICAgICAgICAgICAnQ29ubmVjdGlvbic6J2Nsb3NlJywNCiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOidhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLA0KICAgICAgICAgICAgJ0hvc3QnOidncmFwaC5mYWNlYm9vay5jb20nLA0KICAgICAgICAgICAgJ1gtRkItTmV0LUhOSSc6c3RyKHJhbmRvbS5yYW5kaW50KDJlNCwgNGU0KSksDQogICAgICAgICAgICAnWC1GQi1TSU0tSE5JJzpzdHIocmFuZG9tLnJhbmRpbnQoMmU0LCA0ZTQpKSwNCiAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzonT0F1dGggMzUwNjg1NTMxNzI4fDYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyJywNCiAgICAgICAgICAgICdYLUZCLUNvbm5lY3Rpb24tVHlwZSc6J1dJRkknLA0KICAgICAgICAgICAgJ1gtVGlnb24tSXMtUmV0cnknOidGYWxzZScsDQogICAgICAgICAgICAneC1mYi1zZXNzaW9uLWlkJzonbmlkPWppWit5Tk5CZ2J3QztwaWQ9TWFpbjt0aWQ9MTMyO25jPTE7ZmM9MDtiYz0wO2NpZD02MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicsDQogICAgICAgICAgICAneC1mYi1kZXZpY2UtZ3JvdXAnOic1MTIwJywNCiAgICAgICAgICAgICdYLUZCLUZyaWVuZGx5LU5hbWUnOidWaWV3ZXJSZWFjdGlvbnNNdXRhdGlvbicsDQogICAgICAgICAgICAnWC1GQi1SZXF1ZXN0LUFuYWx5dGljcy1UYWdzJzonZ3JhcGhzZXJ2aWNlJywNCiAgICAgICAgICAgICdYLUZCLUhUVFAtRW5naW5lJzonTGlnZXInLA0KICAgICAgICAgICAgJ1gtRkItQ2xpZW50LUlQJzonVHJ1ZScsDQogICAgICAgICAgICAnWC1GQi1TZXJ2ZXItQ2x1c3Rlcic6J1RydWUnLA0KICAgICAgICAgICAgJ3gtZmItY29ubmVjdGlvbi10b2tlbic6JzYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyJ30NCiAgICAgICAgICAgIHVybCA9ICdodHRwczovL2ItZ3JhcGguZmFjZWJvb2suY29tL2F1dGgvbG9naW4nDQogICAgICAgICAgICBwbyA9IHJlcXVlc3RzLnBvc3QodXJsLGRhdGE9ZGF0YSxoZWFkZXJzPWhlYWQsYWxsb3dfcmVkaXJlY3RzPUZhbHNlKS50ZXh0DQogICAgICAgICAgICBxID0ganNvbi5sb2FkcyhwbykNCiAgICAgICAgICAgIGlmICdhY2Nlc3NfdG9rZW4nIGluIHE6DQogICAgICAgICAgICAgICAgdWlkID0gc3RyKHFbJ3VpZCddKQ0KICAgICAgICAgICAgICAgIGNva2kgPSAiOyIuam9pbihpWyJuYW1lIl0rIj0iK2lbInZhbHVlIl0gZm9yIGkgaW4gcVsic2Vzc2lvbl9jb29raWVzIl0pDQogICAgICAgICAgICAgICAgcHJpbnQoZidcclxye0cxfVtMVUZGWS1PS10ge3VpZH0gfCB7cGFzfScpDQogICAgICAgICAgICAgICAgI3ByaW50KGYnXHJccntHMX1bQ09PS0lFXXtBfSB7Y29raX0nKQ0KICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvTFVGRlktRU1SQU4tT0sudHh0JywnYScpLndyaXRlKHVpZCsnfCcrcGFzKyd8Jytjb2tpKydcbicpDQogICAgICAgICAgICAgICAgb2suYXBwZW5kKHVpZCkNCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgZWxzZTpjb250aW51ZQ0KICAgICAgICBsb29wKz0xDQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICBwYXNzDQogICAgICAgICAgDQptZW51KCkNCiNfX19fX19fX19fX19fX19fX19bIEVORCBdX19fX19fX19fX19fX19fX19fIw=="))