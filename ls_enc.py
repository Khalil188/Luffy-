# Compiled By Mr Mafia | Muhammad Muzammil
# Github  :  https://github.com/Muzammil-404

import base64
exec(base64.b64decode("I19fX19fX19fX19fX19fX19fX1sgSU1QT1JUIF1fX19fX19fX19fX19fX19fX18jDQppbXBvcnQgb3MsemxpYg0KZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIG9zUlVCDQpmcm9tIG9zIGltcG9ydCBzeXN0ZW0gYXMgY21kDQpvcy5zeXN0ZW0oJ2NsZWFyJykNCnByaW50KGYnXHgxYlszODs1OzQ2bVtceDFiWzE7OTdtPVx4MWJbMzg7NTs0Nm1dIExPQURJTkcgTU9EVUxFUyAnKQ0KdHJ5Og0KICAgIGltcG9ydCByZXF1ZXN0cyANCmV4Y2VwdCBJbXBvcnRFcnJvcjoNCiAgICBwcmludChmJ1x4MWJbMzg7NTs0Nm1bXHgxYlsxOzk3bT1ceDFiWzM4OzU7NDZtXSBJTlNUQUxMSU5HIFJFUVVFU1RTICcpDQogICAgb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCByZXF1ZXN0cycpDQp0cnk6DQogICAgaW1wb3J0IGNvbmN1cnJlbnQuZnV0dXJlcw0KZXhjZXB0IEltcG9ydEVycm9yOg0KICAgIHByaW50KGYnXHgxYlszODs1OzQ2bVtceDFiWzE7OTdtPVx4MWJbMzg7NTs0Nm1dIElOU1RBTExJTkcgRlVUVVJFUyAnKQ0KICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgZnV0dXJlcycpDQp0cnk6DQogICAgaW1wb3J0IG1lY2hhbml6ZQ0KZXhjZXB0IE1vZHVsZU5vdEZvdW5kRXJyb3I6DQogICAgb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCBtZWNoYW5pemUgPiAvZGV2L251bGwnKQ0KZnJvbSB1cmxsaWIucmVxdWVzdCBpbXBvcnQgUmVxdWVzdCwgdXJsb3Blbg0KaW1wb3J0IG9zLCByZXF1ZXN0cywgcmUscGxhdGZvcm0sIHN5cywgcmFuZG9tLCBzdWJwcm9jZXNzLCB0aHJlYWRpbmcsIGl0ZXJ0b29scyxiYXNlNjQsdXVpZCx6bGliLHJlLGpzb24sdXVpZCxzdWJwcm9jZXNzLHNodXRpbCx3ZWJicm93c2VyLHRpbWUsanNvbixzeXMscmFuZG9tLGRhdGV0aW1lLHRpbWUscmUsc3VicHJvY2VzcyxwbGF0Zm9ybSxzdHJpbmcsanNvbix0aW1lLHJlLHJhbmRvbSxzeXMsc3RyaW5nLHV1aWQNCmZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3IgYXMgSGFiaWINCmZyb20gc3RyaW5nIGltcG9ydCAqIA0KZnJvbSByYW5kb20gaW1wb3J0IHJhbmRpbnQNCmZyb20gdGltZSBpbXBvcnQgc2xlZXAgYXMgc2xwDQpmcm9tIG9zIGltcG9ydCBzeXN0ZW0gYXMgY21kDQpmcm9tIHpsaWIgaW1wb3J0IGRlY29tcHJlc3MgDQppbXBvcnQgb3MsIHBsYXRmb3JtDQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yDQpmYXN0X3dvcmsgPSBUaHJlYWRQb29sRXhlY3V0b3IobWF4X3dvcmtlcnM9MTUpLnN1Ym1pdA0KI19fX19fX19fX19fX19fX19fX1sgTE9PUCBdX19fX19fX19fX19fX19fX19fIw0KdG90YWxkbXAgPSAwDQpjb3VudCA9IDANCmxvb3AgPSAwDQpva3MgPSBbXQ0KY3BzID0gW10NCmlkID0gW10NCnBzID0gW10NCnNpZCA9IFtdDQp0b3RhbD1bXQ0KbWV0aG9kcyA9IFtdDQpzcmFuZ2UgPSAwDQpzYXZlZCA9IFtdDQp0b3RhbGRtcCA9IDANCmZpbHRlciA9IFtdDQpsb29wLG9rLGNwLHVzZXIgPSAwLFtdLFtdLFtdDQpjb2sscGxpc3QgPSBbXSxbXQ0KI19fX19fX19fX19fX19fX19fX1sgU1lTIF1fX19fX19fX19fX19fX19fX18jDQpzeXMuc3Rkb3V0LndyaXRlKCdceDFiXTI7IHN3YWdceDA3JykNCmhlYWQgPSB7J0hvc3QnOiAnYWRzbWFuYWdlci5mYWNlYm9vay5jb20nLCAnc2VjLWNoLXVhJzogJyJDaHJvbWl1bSI7dj0iMTA3IiwgIk5vdD1BP0JyYW5kIjt2PSIyNCInLCAndmlld3BvcnQtd2lkdGgnOiAnOTgwJ30NCiNfX19fX19fX19fX19fX19fX19bIENPTE9VUiBdX19fX19fX19fX19fX19fX19fIw0KQSA9ICdceDFiWzE7OTdtJztSID0gJ1x4MWJbMzg7NTsxOTZtJztZID0gJ1wwMzNbMTszM20nO0cgPSAnXHgxYlszODs1OzQ4bSc7QiA9ICdceDFiWzM4OzU7OG0nO0cxID0gJ1x4MWJbMzg7NTs0Nm0nO0cyID0gJ1x4MWJbMzg7NTs0N20nO0czID0gJ1x4MWJbMzg7NTs0OG0nO0c0ID0gJ1x4MWJbMzg7NTs0OW0nO0c1ID0gJ1x4MWJbMzg7NTs1MG0nO1ggPSAnXDMzWzE7MzRtJztYMSA9ICdceDFiWzM4OzU7MTRtJztYMiA9ICdceDFiWzM4OzU7MTIzbSc7WDMgPSAnXHgxYlszODs1OzEyMm0nO1g0ID0gJ1x4MWJbMzg7NTs4Nm0nO1g1ID0gJ1x4MWJbMzg7NTsxMjFtJztTID0gJ1x4MWJbMTs5Nm0nO00gPSAnXHgxYlszODs1OzIwNW0nDQojX19fX19fX19fX19fX19fX19fWyBMSU5FWCBdX19fX19fX19fX19fX19fX19fIw0KZGVmIGNsZWFyKCk6b3Muc3lzdGVtKCdjbGVhcicpO3ByaW50KGxvZ28pDQpkZWYgbGluZXgoKTpwcmludChmJ3tBfeKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQojX19fX19fX19fX19fX19fX19fWyBMT0dPIF1fX19fX19fX19fX19fX19fX18jDQpsb2dvID1mIiIie0F9DQogICAge0cxfSAgIC5kTU1NYiAgZE1QIGRNUCBkTVAgLmFNTU1iICAuYU1NTU1QIA0KICAgIHtHMn0gIGRNUCIgVlAgZE1QIGRNUCBkTVAgZE1QImRNUCBkTVAiICAgICANCiAgICB7RzN9ICBWTU1NYiAgZE1QIGRNUCBkTVAgZE1NTU1NUCBkTVAgTU1QIiAgDQogICAge0c0fWRQIC5kTVAgZE1QLmRNUC5kTVAgZE1QIGRNUCBkTVAuZE1QICAgIA0KICAgIHtHNX1WTU1NUCIgIFZNTU1QVk1NUCIgZE1QIGRNUCAgVk1NTVAiIHtHMX1be0F9VntHMX0ve0F9Ny45e0cxfV0NCntBfeKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgA0Ke0cxfVt7QX09e0cxfV17RzF9IE9XTkVSICAgIHtBfTp7RzF9IEhBQklCIEhPU1NBSU4NCntHMX1be0F9PXtHMn1de0cyfSBGQUNFQk9PSyB7QX06e0cyfSBIQUJJQlxfX19fXzoqXOKdty8zOilc4pO/DQp7RzF9W3tBfT17RzN9XXtHM30gVE9PTFRZUEUge0F9OntHM30gRklMRSB7QX0me0c0fSBSQU5ET00gQ0xPTklORw0Ke0cxfVt7QX09e0c0fV17RzR9IFNUQVRVUyAgIHtBfTp7RzR9IFNDUklQVCBTRUxMDQp7QX3ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAiIiINCiNfX19fX19fX19fX19fX19fX19bIFJFU1VMVCBdX19fX19fX19fX19fX19fX19fIw0KZGVmIHJlc3VsdChPS3MsY3BzKToNCiAgICBpZiBsZW4oT0tzKSAhPSAwIG9yIGxlbihjcHMpICE9IDA6DQogICAgICAgIHByaW50KGYnXHJ7QX3ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAnKQ0KICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHMX1de0cxfSBUSEUgUFJPQ0VTUyBIQVMgQkVFTiBDT01QTEVURS4uLicpDQogICAgICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IFRPVEFMIE9LIHtBfTp7RzJ9ICVzJyAlIHN0cihsZW4ob2tzKSkpDQogICAgICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzN9IFRPVEFMIENQIHtBfTp7RzN9ICVzJyAlIHN0cihsZW4oY3BzKSkpDQogICAgICAgIHByaW50KGYnXHJ7QX3ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAnKQ0KICAgICAgICBpbnB1dChmIntHMX1be0F9PXtHNH1de0c0fSBQUkVTUyBFTlRFUiBUTyBCQUNLIE1FTlUgIikNCiAgICAgICAgZXhpdCgpDQojX19fX19fX19fX19fX19fX19fWyBNRU5VIF1fX19fX19fX19fX19fX19fX18jDQpkZWYgbWVudSgpOiAgIA0KICAgIGNsZWFyKCkNCiAgICBwcmludChmJ3tHMX1be0F9MXtHMX1de0cxfSBGSUxFIENMT05JTkcnKQ0KICAgIHByaW50KGYne0cxfVt7QX0ye0cyfV17RzJ9IFJBTkRPTSBDTE9OSU5HJykNCiAgICBwcmludChmJ3tHMX1be0F9M3tHM31de0czfSBDT05UQUNUIFRPT0wgT1dORVInKQ0KICAgIHByaW50KGYne0cxfVt7QX0we0c0fV17RzR9IEVYSVQgVE9PTFMnKQ0KICAgIGxpbmV4KCkNCiAgICBzZWxlY3QgPSBpbnB1dChmJ3tHMX1be0F9P3tHNX1de0c1fSBDSE9JQ0Uge0F9OntHNX0gJykNCiAgICBpZiBzZWxlY3QgPT0nMSc6DQogICAgICAgIF9maWxlXygpDQogICAgZWxpZiBzZWxlY3QgPT0nMic6DQogICAgICAgIF9yYW5kbV8oKQ0KICAgIGVsaWYgc2VsZWN0ID09JzMnOg0KICAgICAgICBvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9zay5zYWhhdGhhdCcpO21lbnUoKQ0KICAgIGVsaWYgc2VsZWN0ID09JzAnOg0KICAgICAgICBleGl0KGYne0cxfVt7QX09e0cxfV17RzF9IEVYSVQgRE9ORSAnKQ0KICAgIGVsc2U6DQogICAgICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IFZBTElEIE9QVElPTicpDQogICAgICAgIHRpbWUuc2xlZXAoMikNCiAgICAgICAgbWVudSgpDQojX19fX19fX19fX19fX19fX19fWyBSQU5ET00gXV9fX19fX19fX19fX19fX19fXyMgICAgICANCmRlZiBfcmFuZG1fKCk6ICAgDQogICAgY2xlYXIoKQ0KICAgIHByaW50KGYne0cxfVt7QX0xe0cxfV17RzF9IEJBTkdMQURFU0ggQ0xPTklORycpDQogICAgcHJpbnQoZid7RzF9W3tBfTJ7RzJ9XXtHMn0gSU5ESUEgQ0xPTklORycpDQogICAgcHJpbnQoZid7RzF9W3tBfTB7RzN9XXtHM30gQkFDSyBUTyBNQUlOIE1FTlUnKQ0KICAgIGxpbmV4KCkNCiAgICBzZWxlY3QgPSBpbnB1dChmJ3tHMX1be0F9P3tHNX1de0c1fSBDSE9JQ0Uge0F9OntHNX0gJykNCiAgICBpZiBzZWxlY3QgPT0nMSc6DQogICAgICAgIF9iZF8oKQ0KICAgIGVsaWYgc2VsZWN0ID09JzInOg0KICAgICAgICBfSW5kaWFfKCkNCiAgICBlbGlmIHNlbGVjdCA9PScwJzoNCiAgICAJbWVudSgpDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gVkFMSUQgT1BUSU9OJykNCiAgICAgICAgdGltZS5zbGVlcCgyKQ0KICAgICAgICBfcmFuZG1fKCkNCiNfX19fX19fX19fX19fX19fX19bIEJBTkdMQURFU0ggXV9fX19fX19fX19fX19fX19fXyMNCmRlZiBfYmRfKCk6DQogICAgY2xlYXIoKQ0KICAgIHByaW50KGYne0cxfVt7QX09e0cxfV17RzF9IEVYQU1QTEUge0F9OntHMX0gMDE3e0F9L3tHMX0wMTl7QX0ve0cxfTAxOHtBfS97RzF9MDE2Jyk7bGluZXgoKQ0KICAgIGNvZGUgPSBpbnB1dChmJ3tHMX1be0F9P3tHMn1de0cyfSBDSE9JQ0UgIHtBfTp7RzJ9ICcpDQogICAgbmFtZSA9ICcnLmpvaW4ocmFuZG9tLmNob2ljZShzdHJpbmcuZGlnaXRzKSBmb3IgXyBpbiByYW5nZSgyKSkNCiAgICBjb2QgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoMikpDQogICAgY2xlYXIoKQ0KICAgIHByaW50KGYne0cxfVt7QX09e0czfV17RzN9IEVYQU1QTEUge0F9OntHM30gMzAwMHtBfS97RzN9NTAwMHtBfS97RzN9MTAwMDB7QX0ve0czfTk5OTk5Jyk7bGluZXgoKQ0KICAgIGxpbWl0ID0gaW50KGlucHV0KGYne0cxfVt7QX0/e0c0fV17RzR9IENIT0lDRSAge0F9OntHNH0gJykpDQogICAgZm9yIHggaW4gcmFuZ2UobGltaXQpOg0KICAgICAgICBubXAgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoNCkpDQogICAgICAgIHVzZXIuYXBwZW5kKG5tcCkNCiAgICBjbGVhcigpDQogICAgd2l0aCBIYWJpYihtYXhfd29ya2Vycz0zMCkgYXMgc2V4eToNCiAgICAgICAgY2xlYXIoKQ0KICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHMX1de0cxfSBTSU0gQ09ERSAge0F9OntHMX0ge2NvZGV9JykNCiAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gVE9UQUwgVUlEIHtBfTp7RzJ9IHtzdHIobGVuKHVzZXIpKX0nKQ0KICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHM31de0czfSBUVVJOIHtHM31be0F9T057QX0ve0F9T0ZGe0czfV17RzN9IEFJUlBMQU5FIE1PREUgRVZFUlkge0F9M3tHM30gTUlOJyk7bGluZXgoKQ0KICAgICAgICBmb3IgbG92ZSBpbiB1c2VyOg0KICAgICAgICAgICAgaWRzID0gY29kZStuYW1lK2NvZCtsb3ZlDQogICAgICAgICAgICBwc2QgPSBbY29kZStuYW1lK2NvZCtsb3ZlLGNvZCtsb3ZlLG5hbWUrbG92ZSxjb2RlK25hbWUrY29kLCdiYW5nbGFkZXNoJywnQmFuZ2xhZGVzaCddDQogICAgICAgICAgICBzZXh5LnN1Ym1pdChyYW5kbSxpZHMscHNkKQ0KICAgIHByaW50KCcnKQ0KICAgIHByaW50KGYnXHJ7QX3ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAnKQ0KICAgIHByaW50KGYne0cxfVt7QX09e0cxfV17RzF9IFRIRSBQUk9DRVNTIEhBUyBCRUVOIENPTVBMRVRFRCcpDQogICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gVE9UQUwgT0sgSUQge0F9OntHMn0ge3N0cihsZW4ob2spKX0nKQ0KICAgIHByaW50KGYne0cxfVt7QX09e0czfV17RzN9IFRPVEFMIENQIElEIHtBfTp7RzN9IHtzdHIobGVuKGNwKSl9JykNCiAgICBwcmludChmJ1xye0F94pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAJykNCiAgICBpbnB1dChmJ3tHMX1be0F9PXtHNH1de0c0fSBQUkVTUyBFTlRFUiBUTyBCQUNLICcpDQogICAgbWVudSgpDQojX19fX19fX19fX19fX19fX19fWyBJTkRJQSBdX19fX19fX19fX19fX19fX19fIw0KZGVmIF9JbmRpYV8oKToNCiAgICBjbGVhcigpDQogICAgcHJpbnQoZid7RzF9W3tBfT17RzF9XXtHMX0gRVhBTVBMRSB7QX06e0cxfSArOTE2Mzl7QX0ve0cxfSs5MTkzNHtBfS97RzF9KzkxOTAye0F9L3tHMX0rOTE3MDEnKTtsaW5leCgpDQogICAgY29kZSA9IGlucHV0KGYne0cxfVt7QX0/e0cyfV17RzJ9IENIT0lDRSAge0F9OntHMn0gJykNCiAgICBjbGVhcigpDQogICAgcHJpbnQoZid7RzF9W3tBfT17RzN9XXtHM30gRVhBTVBMRSB7QX06e0czfSAzMDAwe0F9L3tHM301MDAwe0F9L3tHM30xMDAwMHtBfS97RzN9OTk5OTknKTtsaW5leCgpDQogICAgbGltaXQgPSBpbnQoaW5wdXQoZid7RzF9W3tBfT97RzR9XXtHNH0gQ0hPSUNFICB7QX06e0c0fSAnKSkNCiAgICBmb3IgeCBpbiByYW5nZShsaW1pdCk6DQogICAgICAgIG5tcCA9ICIiLiBqb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoNykpDQogICAgICAgIHVzZXIuYXBwZW5kKG5tcCkNCiAgICBjbGVhcigpDQogICAgd2l0aCBIYWJpYihtYXhfd29ya2Vycz0zMCkgYXMgc2V4eToNCiAgICAgICAgY2xlYXIoKQ0KICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHMX1de0cxfSBTSU0gQ09ERSAge0F9OntHMX0ge2NvZGV9JykNCiAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gVE9UQUwgVUlEIHtBfTp7RzJ9IHtzdHIobGVuKHVzZXIpKX0nKQ0KICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHM31de0czfSBUVVJOIHtHM31be0F9T057QX0ve0F9T0ZGe0czfV17RzN9IEFJUlBMQU5FIE1PREUgRVZFUlkge0F9M3tHM30gTUlOJyk7bGluZXgoKQ0KICAgICAgICBmb3IgbG92ZSBpbiB1c2VyOg0KICAgICAgICAgICAgaWRzID0gY29kZStsb3ZlDQogICAgICAgICAgICBwc2QgPSBbbG92ZSxpZHNbOjhdLCc1NzI3MzIwMCcsJzU5MDM5MjAwJywnNTc1NzU3NTEnXQ0KICAgICAgICAgICAgc2V4eS5zdWJtaXQocmFuZG0saWRzLHBzZCkNCiAgICBwcmludCgnJykNCiAgICBwcmludChmJ1xye0F94pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAJykNCiAgICBwcmludChmJ3tHMX1be0F9PXtHMX1de0cxfSBUSEUgUFJPQ0VTUyBIQVMgQkVFTiBDT01QTEVURUQnKQ0KICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IFRPVEFMIE9LIElEIHtBfTp7RzJ9IHtzdHIobGVuKG9rKSl9JykNCiAgICBwcmludChmJ3tHMX1be0F9PXtHM31de0czfSBUT1RBTCBDUCBJRCB7QX06e0czfSB7c3RyKGxlbihjcCkpfScpDQogICAgcHJpbnQoZidccntBfeKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQogICAgaW5wdXQoZid7RzF9W3tBfT17RzR9XXtHNH0gUFJFU1MgRU5URVIgVE8gQkFDSyAnKQ0KICAgIG1lbnUoKQ0KI19fX19fX19fX19fX19fX19fX1sgRklMRSBdX19fX19fX19fX19fX19fX19fIyAgICAgIA0KZGVmIF9maWxlXygpOg0KICAgIGdsb2JhbCBtZXRob2RzDQogICAgY2xlYXIoKQ0KICAgIHByaW50KGYne0cxfVt7QX0xe0cxfV17RzF9IE1FVEhPRCB7RzF9W3tBfU0xe0cxfV17RzF9ICcpDQogICAgcHJpbnQoZid7RzF9W3tBfTJ7RzJ9XXtHMn0gTUVUSE9EIHtHMn1be0F9TTJ7RzJ9XXtHMX0gJykNCiAgICBsaW5leCgpDQogICAgb3B0aW9uID0gaW5wdXQoZid7RzF9W3tBfT97RzN9XXtHM30gQ0hPSUNFIHtBfTp7RzN9ICcpDQogICAgaWYgb3B0aW9uID09JzEnOg0KICAgICAgICBtZXRob2RzLmFwcGVuZCgnbWV0aG9kQScpDQogICAgICAgIG1haW5fY3JhY2soKS5jcmFjayhpZCkNCiAgICBlbGlmIG9wdGlvbiA9PScyJzoNCiAgICAgICAgbWV0aG9kcy5hcHBlbmQoJ21ldGhvZEInKQ0KICAgICAgICBtYWluX2NyYWNrKCkuY3JhY2soaWQpDQogICAgZWxpZiBvcHRpb24gPT0nMCc6DQogICAgICAgIF9maWxlXygpDQogICAgZWxzZToNCiAgICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IFZBTElEIE9QVElPTicpDQogICAgICB0aW1lLnNsZWVwKDIpDQogICAgICBfZmlsZV8oKQ0KDQpjbGFzcyBtYWluX2NyYWNrKCk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgICAgICBzZWxmLmlkPVtdDQogICAgZGVmIGNyYWNrKHNlbGYsaWQpOg0KICAgICAgICBnbG9iYWwgbWV0aG9kcw0KICAgICAgICBjbGVhcigpDQogICAgICAgIHByaW50KGYne0cxfVt7QX09e0cxfV17RzF9IEVYQU1QTEUge0F9OntHMX0gL3NkY2FyZC9TV0FHLnR4dCcpO2xpbmV4KCkNCiAgICAgICAgc2VsZi5maWxlID0gaW5wdXQoZid7RzF9W3tBfT97RzJ9XXtHMn0gRklMRSBOQU1FIHtBfTp7RzJ9ICcpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHNlbGYuaWQgPSBvcGVuKHNlbGYuZmlsZSkucmVhZCgpLnNwbGl0bGluZXMoKQ0KICAgICAgICAgICAgc2VsZi5wYXN3KCkNCiAgICAgICAgZXhjZXB0IEZpbGVOb3RGb3VuZEVycm9yOg0KICAgICAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gT1BQUyBGSUxFIE5PVCBGT1VORCAuLi4nKQ0KICAgICAgICAgICAgdGltZS5zbGVlcCgyKQ0KICAgICAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpDQogICAgICAgICAgICBwcmludChsb2dvKQ0KICAgICAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gVFJZIEFHQUlOIC4uLicpDQogICAgICAgICAgICB0aW1lLnNsZWVwKDIpDQogICAgICAgICAgICBtYWluX2NyYWNrKCkuY3JhY2soaWQpDQojX19fX19fX19fX19fX19fX19fWyBGSUxFIE1FVEhPRCBNMSBdX19fX19fX19fX19fX19fX19fIyAgICAgICAgICAgDQogICAgZGVmIG1ldGhvZEEoc2VsZiwgc2lkLCBuYW1lLCBwc3cpOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBnbG9iYWwgb2tzLGNwcyxsb29wDQogICAgICAgICAgICB1YSAgPSAiW0ZCQU4vRkI0QTtGQkFWLyIrc3RyKHJhbmRvbS5yYW5kaW50KDExLDc3KSkrJy4wLjAuJytzdHIocmFuZG9tLnJhbmRyYW5nZSg5LDQ5KSkrc3RyKHJhbmRvbS5yYW5kaW50KDExLDc3KSkgKyI7RkJCVi8iK3N0cihyYW5kb20ucmFuZGludCgxMTExMTExLDc3Nzc3NzcpKSsiOydbRkJBTi9GQjRBO0ZCQVYvNTkuMC4wLjE1LjMxMztGQkJWLzIwMDk3MTcyO0ZCRE0ve2RlbnNpdHk9MS41LHdpZHRoPTU0MCxoZWlnaHQ9OTYwfTtGQkxDL2VuX1VTO0ZCQ1IvQWlydGVsO0ZCTUYvU2Ftc3VuZztGQkJEL1NhbXN1bmc7RkJQTi9jb20uZmFjZWJvb2sua2F0YW5hO0ZCRFYvTC1FTUVOVDUwMDtGQlNWLzQuNC4yO251bGxGQkNBL2FybWVhYmktdjdhOmFybWVhYmk7XSINCiAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZiJccntHMX1be0F9U0FXRy1NMXtHMX1de0F9LXtHMX1be0F9e2xvb3B9e0cxfV17QX0te0cxfVt7QX1PS3tHMX0ve0F9Q1B7RzF9XXtBfS17RzF9W3tBfXtsZW4ob2tzKX17RzF9L3tBfXtsZW4oY3BzKX17RzF9XSAiKQ0KICAgICAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgICAgICBmcyA9IG5hbWUuc3BsaXQoJyAnKVswXQ0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGxzID0gbmFtZS5zcGxpdCgnICcpWzFdDQogICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgbHMgPSBmcw0KICAgICAgICAgICAgZm9yIHB3IGluIHBzdzoNCiAgICAgICAgICAgICAgICBwcyA9IHB3LnJlcGxhY2UoJ2ZpcnN0Jyxmcy5sb3dlcigpKS5yZXBsYWNlKCdGaXJzdCcsZnMpLnJlcGxhY2UoJ2xhc3QnLGxzLmxvd2VyKCkpLnJlcGxhY2UoJ0xhc3QnLGxzKS5yZXBsYWNlKCdOYW1lJyxuYW1lKS5yZXBsYWNlKCduYW1lJyxuYW1lLmxvd2VyKCkpDQogICAgICAgICAgICAgICAgd2l0aCByZXF1ZXN0cy5TZXNzaW9uKCkgYXMgc2Vzc2lvbjoNCiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHsiYWRpZCI6IHN0cih1dWlkLnV1aWQ0KCkpLA0KICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IjogImpzb24iLA0KICAgICAgICAgICAgICAgICAgICAiZGV2aWNlX2lkIjogc3RyKHV1aWQudXVpZDQoKSksDQogICAgICAgICAgICAgICAgICAgICJjcGwiOiAidHJ1ZSIsDQogICAgICAgICAgICAgICAgICAgICJmYW1pbHlfZGV2aWNlX2lkIjogc3RyKHV1aWQudXVpZDQoKSksDQogICAgICAgICAgICAgICAgICAgICJjcmVkZW50aWFsc190eXBlIjogImRldmljZV9iYXNlZF9sb2dpbl9wYXNzd29yZCIsDQogICAgICAgICAgICAgICAgICAgICJlcnJvcl9kZXRhaWxfdHlwZSI6ICJidXR0b25fd2l0aF9kaXNhYmxlZCIsDQogICAgICAgICAgICAgICAgICAgICJzb3VyY2UiOiAiZGV2aWNlX2Jhc2VkX2xvZ2luIiwNCiAgICAgICAgICAgICAgICAgICAgImVtYWlsIjogc2lkLA0KICAgICAgICAgICAgICAgICAgICAicGFzc3dvcmQiOiBwcywNCiAgICAgICAgICAgICAgICAgICAgImFjY2Vzc190b2tlbiI6ICIzNTA2ODU1MzE3MjglN0M2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMiIsDQogICAgICAgICAgICAgICAgICAgICJnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXMiOiAiMSIsDQogICAgICAgICAgICAgICAgICAgICJtZXRhX2luZl9mYm1ldGEiOiAiIiwNCiAgICAgICAgICAgICAgICAgICAgImFkdmVydGlzZXJfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwNCiAgICAgICAgICAgICAgICAgICAgImN1cnJlbnRseV9sb2dnZWRfaW5fdXNlcmlkIjogIjAiLA0KICAgICAgICAgICAgICAgICAgICAibG9jYWxlIjogImVuX0dCIiwNCiAgICAgICAgICAgICAgICAgICAgImNsaWVudF9jb3VudHJ5X2NvZGUiOiAiR0IiLA0KICAgICAgICAgICAgICAgICAgICAibWV0aG9kIjogImF1dGgubG9naW4iLA0KICAgICAgICAgICAgICAgICAgICAiZmJfYXBpX3JlcV9mcmllbmRseV9uYW1lIjogImF1dGhlbnRpY2F0ZSIsDQogICAgICAgICAgICAgICAgICAgICJmYl9hcGlfY2FsbGVyX2NsYXNzIjogImNvbS5mYWNlYm9vay5hY2NvdW50LmxvZ2luLnByb3RvY29sLkZiNGFBdXRoSGFuZGxlciIsDQogICAgICAgICAgICAgICAgICAgICJhcGlfa2V5IjogIjg4MmE4NDkwMzYxZGE5ODcwMmJmOTdhMDIxZGRjMTRkIn0NCiAgICAgICAgICAgICAgICBoZWFkZXJzID0geydVc2VyLUFnZW50JzogdWEsDQogICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywNCiAgICAgICAgICAgICAgICAgICAgJ0hvc3QnOiAnZ3JhcGguZmFjZWJvb2suY29tJywNCiAgICAgICAgICAgICAgICAgICAgJ1gtRkItTmV0LUhOSSc6IHN0cihyYW5kb20ucmFuZGludCgyMDAwMCwgNDAwMDApKSwNCiAgICAgICAgICAgICAgICAgICAgJ1gtRkItU0lNLUhOSSc6IHN0cihyYW5kb20ucmFuZGludCgyMDAwMCwgNDAwMDApKSwNCiAgICAgICAgICAgICAgICAgICAgJ1gtRkItQ29ubmVjdGlvbi1UeXBlJzogJ01PQklMRS5MVEUnLA0KICAgICAgICAgICAgICAgICAgICAnWC1UaWdvbi1Jcy1SZXRyeSc6ICdGYWxzZScsDQogICAgICAgICAgICAgICAgICAgICd4LWZiLXNlc3Npb24taWQnOiAnbmlkPWppWit5Tk5CZ2J3QztwaWQ9TWFpbjt0aWQ9MTMyO25jPTE7ZmM9MDtiYz0wO2NpZD1kMjlkNjdkMzdlY2EzODc0ODJhOGE1Yjc0MGY4NGY2MicsDQogICAgICAgICAgICAgICAgICAgICd4LWZiLWRldmljZS1ncm91cCc6ICc1MTIwJywNCiAgICAgICAgICAgICAgICAgICAgJ1gtRkItRnJpZW5kbHktTmFtZSc6ICdWaWV3ZXJSZWFjdGlvbnNNdXRhdGlvbicsDQogICAgICAgICAgICAgICAgICAgICdYLUZCLVJlcXVlc3QtQW5hbHl0aWNzLVRhZ3MnOiAnZ3JhcGhzZXJ2aWNlJywNCiAgICAgICAgICAgICAgICAgICAgJ1gtRkItSFRUUC1FbmdpbmUnOiAnTGlnZXInLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1DbGllbnQtSVAnOiAnVHJ1ZScsDQogICAgICAgICAgICAgICAgICAgICdYLUZCLVNlcnZlci1DbHVzdGVyJzogJ1RydWUnLA0KICAgICAgICAgICAgICAgICAgICAneC1mYi1jb25uZWN0aW9uLXRva2VuJzogJ2QyOWQ2N2QzN2VjYTM4NzQ4MmE4YTViNzQwZjg0ZjYyJyx9DQogICAgICAgICAgICAgICAgcSA9IHNlc3Npb24ucG9zdCgiaHR0cHM6Ly9iLWdyYXBoLmZhY2Vib29rLmNvbS9hdXRoL2xvZ2luIixkYXRhPWRhdGEsIGhlYWRlcnM9aGVhZGVycywgYWxsb3dfcmVkaXJlY3RzPUZhbHNlKS5qc29uKCkNCiAgICAgICAgICAgICAgICBpZiAnc2Vzc2lvbl9rZXknIGluIHE6DQogICAgICAgICAgICAgICAgICAgIGNra2sgPSAiOyIuam9pbihpWyJuYW1lIl0rIj0iK2lbInZhbHVlIl0gZm9yIGkgaW4gcVsic2Vzc2lvbl9jb29raWVzIl0pO3N3YWdiID0gYmFzZTY0LmI2NGVuY29kZShvcy51cmFuZG9tKDE4KSkuZGVjb2RlKCkucmVwbGFjZSgiPSIsIiIpLnJlcGxhY2UoIisiLCJfIikucmVwbGFjZSgiLyIsIi0iKTtjb29raWUgPSBmInNiPXtzd2FnYn07e2Nra2t9Ig0KICAgICAgICAgICAgICAgICAgICBwcmludChmIlxyXHJ7RzF9W1NXQUctT0tdIHtzaWR9IHwge3BzfSAiKQ0KICAgICAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL1NXQUctTTEtRklMRS1PSy50eHQnLCdhJykud3JpdGUoc2lkKyd8JytwcysnfCcrY29va2llKydcbicpDQogICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoc2lkKQ0KICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIHFbJ2Vycm9yJ11bJ21lc3NhZ2UnXToNCiAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiXHJccntNfVtTV0FHLUNQXSB7c2lkfSB8IHtwc30gIikNCiAgICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvU1dBRy1NMi1GSUxFLU9LLnR4dCcsJ2EnKS53cml0ZShzaWQrJ3wnK3BzKydcbicpDQogICAgICAgICAgICAgICAgICAgICBjcHMuYXBwZW5kKHNpZCkNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgbG9vcCs9MQ0KICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQogICAgICAgICAgICBzZWxmLm1ldGhvZEEoc2lkLCBuYW1lLCBwcykNCiNfX19fX19fX19fX19fX19fX19bIEZJTEUgTUVUSE9EIE0yIF1fX19fX19fX19fX19fX19fX18jICAgICAgICAgICAgIA0KICAgIGRlZiBtZXRob2RCKHNlbGYsIHNpZCwgbmFtZSwgcHN3KToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgZ2xvYmFsIG9rcyxjcHMsbG9vcA0KICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZShmIlxye0cxfVt7QX1TQVdHLU0ye0cxfV17QX0te0cxfVt7QX17bG9vcH17RzF9XXtBfS17RzF9W3tBfU9Le0cxfS97QX1DUHtHMX1de0F9LXtHMX1be0F9e2xlbihva3MpfXtHMX0ve0F9e2xlbihjcHMpfXtHMX1dICIpDQogICAgICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgICAgIGZzID0gbmFtZS5zcGxpdCgnICcpWzBdDQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgbHMgPSBuYW1lLnNwbGl0KCcgJylbMV0NCiAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICBscyA9IGZzDQogICAgICAgICAgICBmb3IgcHcgaW4gcHN3Og0KICAgICAgICAgICAgICAgIHBzID0gcHcucmVwbGFjZSgnZmlyc3QnLGZzLmxvd2VyKCkpLnJlcGxhY2UoJ0ZpcnN0JyxmcykucmVwbGFjZSgnbGFzdCcsbHMubG93ZXIoKSkucmVwbGFjZSgnTGFzdCcsbHMpLnJlcGxhY2UoJ05hbWUnLG5hbWUpLnJlcGxhY2UoJ25hbWUnLG5hbWUubG93ZXIoKSkNCiAgICAgICAgICAgICAgICB3aXRoIHJlcXVlc3RzLlNlc3Npb24oKSBhcyBzZXNzaW9uOg0KICAgICAgICAgICAgICAgICAgICBkYXRhID0geyJhZGlkIjogc3RyKHV1aWQudXVpZDQoKSksDQogICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAianNvbiIsDQogICAgICAgICAgICAgICAgICAgICJkZXZpY2VfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwNCiAgICAgICAgICAgICAgICAgICAgImNwbCI6ICJ0cnVlIiwNCiAgICAgICAgICAgICAgICAgICAgImZhbWlseV9kZXZpY2VfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwNCiAgICAgICAgICAgICAgICAgICAgImNyZWRlbnRpYWxzX3R5cGUiOiAiZGV2aWNlX2Jhc2VkX2xvZ2luX3Bhc3N3b3JkIiwNCiAgICAgICAgICAgICAgICAgICAgImVycm9yX2RldGFpbF90eXBlIjogImJ1dHRvbl93aXRoX2Rpc2FibGVkIiwNCiAgICAgICAgICAgICAgICAgICAgInNvdXJjZSI6ICJkZXZpY2VfYmFzZWRfbG9naW4iLA0KICAgICAgICAgICAgICAgICAgICAiZW1haWwiOiBzaWQsDQogICAgICAgICAgICAgICAgICAgICJwYXNzd29yZCI6IHBzLA0KICAgICAgICAgICAgICAgICAgICAiYWNjZXNzX3Rva2VuIjogIjM1MDY4NTUzMTcyOCU3QzYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyIiwNCiAgICAgICAgICAgICAgICAgICAgImdlbmVyYXRlX3Nlc3Npb25fY29va2llcyI6ICIxIiwNCiAgICAgICAgICAgICAgICAgICAgIm1ldGFfaW5mX2ZibWV0YSI6ICIiLA0KICAgICAgICAgICAgICAgICAgICAiYWR2ZXJ0aXNlcl9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLA0KICAgICAgICAgICAgICAgICAgICAiY3VycmVudGx5X2xvZ2dlZF9pbl91c2VyaWQiOiAiMCIsDQogICAgICAgICAgICAgICAgICAgICJsb2NhbGUiOiAiZW5fR0IiLA0KICAgICAgICAgICAgICAgICAgICAiY2xpZW50X2NvdW50cnlfY29kZSI6ICJHQiIsDQogICAgICAgICAgICAgICAgICAgICJtZXRob2QiOiAiYXV0aC5sb2dpbiIsDQogICAgICAgICAgICAgICAgICAgICJmYl9hcGlfcmVxX2ZyaWVuZGx5X25hbWUiOiAiYXV0aGVudGljYXRlIiwNCiAgICAgICAgICAgICAgICAgICAgImZiX2FwaV9jYWxsZXJfY2xhc3MiOiAiY29tLmZhY2Vib29rLmFjY291bnQubG9naW4ucHJvdG9jb2wuRmI0YUF1dGhIYW5kbGVyIiwNCiAgICAgICAgICAgICAgICAgICAgImFwaV9rZXkiOiAiODgyYTg0OTAzNjFkYTk4NzAyYmY5N2EwMjFkZGMxNGQifQ0KICAgICAgICAgICAgICAgIGhlYWRlcnMgPSB7J1VzZXItQWdlbnQnOiAnW0ZCQU4vRkI0QTtGQkFWLzMwNS4xLjAuNDAuMTIwO0ZCQlYvMjcyNDAxMjA5O0ZCRE0ve2RlbnNpdHk9Mi4wLHdpZHRoPTcyMCxoZWlnaHQ9MTQ1Nn07RkJMQy9pdF9JVDtGQlJWLzI3MzQ3NDExODtGQkNSL0kgVElNO0ZCTUYvT1BQTztGQkJEL09QUE87RkJQTi9jb20uZmFjZWJvb2sua2F0YW5hO0ZCRFYvQ1BIMTkzMTtGQlNWLzEwO0ZCQksvMTtGQk9QLzE7RkJDQS9hcm02NC12OGE6O10nLA0KICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsDQogICAgICAgICAgICAgICAgICAgICdIb3N0JzogJ2dyYXBoLmZhY2Vib29rLmNvbScsDQogICAgICAgICAgICAgICAgICAgICdYLUZCLU5ldC1ITkknOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAsIDQwMDAwKSksDQogICAgICAgICAgICAgICAgICAgICdYLUZCLVNJTS1ITkknOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAsIDQwMDAwKSksDQogICAgICAgICAgICAgICAgICAgICdYLUZCLUNvbm5lY3Rpb24tVHlwZSc6ICdNT0JJTEUuTFRFJywNCiAgICAgICAgICAgICAgICAgICAgJ1gtVGlnb24tSXMtUmV0cnknOiAnRmFsc2UnLA0KICAgICAgICAgICAgICAgICAgICAneC1mYi1zZXNzaW9uLWlkJzogJ25pZD1qaVoreU5OQmdid0M7cGlkPU1haW47dGlkPTEzMjtuYz0xO2ZjPTA7YmM9MDtjaWQ9ZDI5ZDY3ZDM3ZWNhMzg3NDgyYThhNWI3NDBmODRmNjInLA0KICAgICAgICAgICAgICAgICAgICAneC1mYi1kZXZpY2UtZ3JvdXAnOiAnNTEyMCcsDQogICAgICAgICAgICAgICAgICAgICdYLUZCLUZyaWVuZGx5LU5hbWUnOiAnVmlld2VyUmVhY3Rpb25zTXV0YXRpb24nLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1SZXF1ZXN0LUFuYWx5dGljcy1UYWdzJzogJ2dyYXBoc2VydmljZScsDQogICAgICAgICAgICAgICAgICAgICdYLUZCLUhUVFAtRW5naW5lJzogJ0xpZ2VyJywNCiAgICAgICAgICAgICAgICAgICAgJ1gtRkItQ2xpZW50LUlQJzogJ1RydWUnLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1TZXJ2ZXItQ2x1c3Rlcic6ICdUcnVlJywNCiAgICAgICAgICAgICAgICAgICAgJ3gtZmItY29ubmVjdGlvbi10b2tlbic6ICdkMjlkNjdkMzdlY2EzODc0ODJhOGE1Yjc0MGY4NGY2MicsfQ0KICAgICAgICAgICAgICAgIHEgPSBzZXNzaW9uLnBvc3QoImh0dHBzOi8vYi1ncmFwaC5mYWNlYm9vay5jb20vYXV0aC9sb2dpbiIsZGF0YT1kYXRhLCBoZWFkZXJzPWhlYWRlcnMsIGFsbG93X3JlZGlyZWN0cz1GYWxzZSkuanNvbigpDQogICAgICAgICAgICAgICAgaWYgJ3Nlc3Npb25fa2V5JyBpbiBxOg0KICAgICAgICAgICAgICAgICAgICBja2trID0gIjsiLmpvaW4oaVsibmFtZSJdKyI9IitpWyJ2YWx1ZSJdIGZvciBpIGluIHFbInNlc3Npb25fY29va2llcyJdKTtzd2FnYiA9IGJhc2U2NC5iNjRlbmNvZGUob3MudXJhbmRvbSgxOCkpLmRlY29kZSgpLnJlcGxhY2UoIj0iLCIiKS5yZXBsYWNlKCIrIiwiXyIpLnJlcGxhY2UoIi8iLCItIik7Y29va2llID0gZiJzYj17c3dhZ2J9O3tja2trfSINCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcclxye0cxfVtTV0FHLU9LXSB7c2lkfSB8IHtwc30gIikNCiAgICAgICAgICAgICAgICAgICAgb3BlbignL3NkY2FyZC9TV0FHLU0yLUZJTEUtT0sudHh0JywnYScpLndyaXRlKHNpZCsnfCcrcHMrJ3wnK2Nvb2tpZSsnXG4nKQ0KICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHNpZCkNCiAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBxWydlcnJvciddWydtZXNzYWdlJ106DQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiXHJccntNfVtTV0FHLUNQXSB7c2lkfSB8IHtwc30gIikNCiAgICAgICAgICAgICAgICAgICAgb3BlbignL3NkY2FyZC9TV0FHLU0yLUZJTEUtT0sudHh0JywnYScpLndyaXRlKHNpZCsnfCcrcHMrJ1xuJykNCiAgICAgICAgICAgICAgICAgICAgY3BzLmFwcGVuZChzaWQpDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIGxvb3ArPTENCiAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOg0KICAgICAgICAgICAgc2VsZi5tZXRob2RDKHNpZCwgbmFtZSwgcHMpDQojX19fX19fX19fX19fX19fX19fWyBQQVNTV09SRCBdX19fX19fX19fX19fX19fX19fIw0KICAgIGRlZiBwYXN3KHNlbGYpOiAgICAgICANCiAgICAgICAgICAgIHB3ID0gW10NCiAgICAgICAgICAgIGNsZWFyKCkNCiAgICAgICAgICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IEVYQU1QTEUge0F9OntHMn0gQkQgMTAtMTgvSU5ESUEgMy01Jyk7bGluZXgoKQ0KICAgICAgICAgICAgc2wgPSBpbnQoaW5wdXQoZid7RzF9W3tBfT97RzN9XXtHM30gUEFTU1dPUkQgTElNSVQge0F9OntHM30gJykpDQogICAgICAgICAgICBjbGVhcigpDQogICAgICAgICAgICBwcmludChmJ3tHMX1be0F9P3tHNH1de0c0fSBFWEFNUExFIHtBfTp7RzR9IGZpcnN0MTIzL2ZpcnN0bGFzdC9maXJzdEBAQCcpDQogICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICBpZiBzbCA9PScnOg0KICAgICAgICAgICAgICAgIHByaW50KGYne0cxfVt7QX09e0c1fV17RzV9IFBVVCBMSU1JVCBCRVRXRUVOIDEgVE8gMzAnKQ0KICAgICAgICAgICAgZWxpZiBzbCA+IDIwOg0KICAgICAgICAgICAgICAgIHByaW50KGYne0cxfVt7QX09e0cxfV17RzF9IFBBU1NXT1JEIExJTUlUIFNIT1VMRCBOT1QgQkUgR1JFQVRFUiBUSEFOIDMwJykNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgZm9yIHNyIGluIHJhbmdlKHNsKToNCiAgICAgICAgICAgICAgICAgICAgcHcuYXBwZW5kKGlucHV0KGYne0cxfVt7QX09e0cxfV17RzF9IFBBU1NXT1JEIE5PIHtHMX1be0F9e3NyKzF9e0cxfV0ge0F9OntHMX0gJykpDQogICAgICAgICAgICBjbGVhcigpDQogICAgICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHMX1de0cxfSBUT1RBTCBGSUxFIFVJRCB7QX06e0cxfSAlcyAnICUgbGVuKHNlbGYuaWQpKQ0KICAgICAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gUEFTU1dPUkQgTElNSVQge0F9OntHMX0ge3NsfSAnKQ0KICAgICAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzN9XXtHM30gVFVSTiB7RzN9W3tBfU9Oe0F9L3tBfU9GRntHM31de0czfSBBSVJQTEFORSBNT0RFIEVWRVJZIHtBfTN7RzN9IE1JTicpDQogICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICB3aXRoIEhhYmliKG1heF93b3JrZXJzPTMwKSBhcyBzd2Fnd29ybGQ6DQogICAgICAgICAgICAgICAgZm9yIHpzYiBpbiBzZWxmLmlkOg0KICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgdWlkLCBuYW1lID0genNiLnNwbGl0KCd8JykNCiAgICAgICAgICAgICAgICAgICAgICAgc3ogPSBuYW1lLnNwbGl0KCcgJykNCiAgICAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHN6KSA9PSAzIG9yIGxlbihzeikgPT0gNCBvciBsZW4oc3opID09IDUgb3IgbGVuKHN6KSA9PSA4Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgcHd4ID0gIHB3DQogICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHd4ID0gIHB3DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ21ldGhvZEEnIGluIG1ldGhvZHM6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3YWd3b3JsZC5zdWJtaXQoc2VsZi5tZXRob2RBLCB1aWQsIG5hbWUsIHB3eCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmICdtZXRob2RCJyBpbiBtZXRob2RzOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2Fnd29ybGQuc3VibWl0KHNlbGYubWV0aG9kQiwgdWlkLCBuYW1lLCBwd3gpDQogICAgICAgICAgICAgICAgICAgZXhjZXB0OnBhc3MNCiAgICAgICAgICAgIHJlc3VsdChva3MsY3BzKQ0KI19fX19fX19fX19fX19fX19fX1sgUkFORE9NIE1FVEhPRCBdX19fX19fX19fX19fX19fX19fIw0KZGVmIHJhbmRtKGlkcyxwc2QpOg0KICAgIGdsb2JhbCBsb29wLG9rLGNwDQogICAgc3lzLnN0ZG91dC53cml0ZShmIlxye0cxfVt7QX1TQVdHLVhEe0cxfV17QX0te0cxfVt7QX17bG9vcH17RzF9XXtBfS17RzF9W3tBfU9Le0cxfS97QX1DUHtHMX1de0F9LXtHMX1be0F9e2xlbihvayl9e0cxfS97QX17bGVuKGNwKX17RzF9XSAiKQ0KICAgIHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgIHRyeToNCiAgICAgICAgZm9yIHBhcyBpbiBwc2Q6DQogICAgICAgICAgICBkYXRhPXsnYWRpZCc6c3RyKHV1aWQudXVpZDQoKSksDQogICAgICAgICAgICAnZm9ybWF0JzonanNvbicsDQogICAgICAgICAgICAnZGV2aWNlX2lkJzpzdHIodXVpZC51dWlkNCgpKSwNCiAgICAgICAgICAgICdlbWFpbCc6aWRzLA0KICAgICAgICAgICAgJ3Bhc3N3b3JkJzpwYXMsDQogICAgICAgICAgICAnZ2VuZXJhdGVfYW5hbHl0aWNzX2NsYWltcyc6JzEnLA0KICAgICAgICAgICAgJ2NvbW11bml0eV9pZCc6JycsDQogICAgICAgICAgICAnY3BsJzondHJ1ZScsJ3RyeV9udW0nOicxJywNCiAgICAgICAgICAgICdmYW1pbHlfZGV2aWNlX2lkJzpzdHIodXVpZC51dWlkNCgpKSwNCiAgICAgICAgICAgICdjcmVkZW50aWFsc190eXBlJzoncGFzc3dvcmQnLA0KICAgICAgICAgICAgJ3NvdXJjZSc6J2xvZ2luJywNCiAgICAgICAgICAgICdlcnJvcl9kZXRhaWxfdHlwZSc6J2J1dHRvbl93aXRoX2Rpc2FibGVkJywNCiAgICAgICAgICAgICdlbnJvbGxfbWlzYXV0aCc6J2ZhbHNlJywNCiAgICAgICAgICAgICdnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXMnOicxJywNCiAgICAgICAgICAgICdnZW5lcmF0ZV9tYWNoaW5lX2lkJzonMScsDQogICAgICAgICAgICAnY3VycmVudGx5X2xvZ2dlZF9pbl91c2VyaWQnOicwJywNCiAgICAgICAgICAgICdsb2NhbGUnOidlbl9VUycsDQogICAgICAgICAgICAnY2xpZW50X2NvdW50cnlfY29kZSc6J1VTJywNCiAgICAgICAgICAgICdmYl9hcGlfcmVxX2ZyaWVuZGx5X25hbWUnOidhdXRoZW50aWNhdGUnLA0KICAgICAgICAgICAgJ2FwaV9rZXknOic2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicsDQogICAgICAgICAgICAnYWNjZXNzX3Rva2VuJzonMzUwNjg1NTMxNzI4fDYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyJ30NCiAgICAgICAgICAgIGhlYWQ9eydVc2VyLUFnZW50JzogJ1tGQkFOL0ZCNEE7RkJBVi8zMDUuMS4wLjQwLjEyMDtGQkJWLzI3MjQwMTIwOTtGQkRNL3tkZW5zaXR5PTIuMCx3aWR0aD03MjAsaGVpZ2h0PTE0NTZ9O0ZCTEMvaXRfSVQ7RkJSVi8yNzM0NzQxMTg7RkJDUi9JIFRJTTtGQk1GL09QUE87RkJCRC9PUFBPO0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkRWL0NQSDE5MzE7RkJTVi8xMDtGQkJLLzE7RkJPUC8xO0ZCQ0EvYXJtNjQtdjhhOjtdJywNCiAgICAgICAgICAgICdBY2NlcHQtRW5jb2RpbmcnOidnemlwLCBkZWZsYXRlJywNCiAgICAgICAgICAgICdDb25uZWN0aW9uJzonY2xvc2UnLA0KICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsDQogICAgICAgICAgICAnSG9zdCc6J2dyYXBoLmZhY2Vib29rLmNvbScsDQogICAgICAgICAgICAnWC1GQi1OZXQtSE5JJzpzdHIocmFuZG9tLnJhbmRpbnQoMmU0LCA0ZTQpKSwNCiAgICAgICAgICAgICdYLUZCLVNJTS1ITkknOnN0cihyYW5kb20ucmFuZGludCgyZTQsIDRlNCkpLA0KICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOidPQXV0aCAzNTA2ODU1MzE3Mjh8NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInLA0KICAgICAgICAgICAgJ1gtRkItQ29ubmVjdGlvbi1UeXBlJzonV0lGSScsDQogICAgICAgICAgICAnWC1UaWdvbi1Jcy1SZXRyeSc6J0ZhbHNlJywNCiAgICAgICAgICAgICd4LWZiLXNlc3Npb24taWQnOiduaWQ9amlaK3lOTkJnYndDO3BpZD1NYWluO3RpZD0xMzI7bmM9MTtmYz0wO2JjPTA7Y2lkPTYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyJywNCiAgICAgICAgICAgICd4LWZiLWRldmljZS1ncm91cCc6JzUxMjAnLA0KICAgICAgICAgICAgJ1gtRkItRnJpZW5kbHktTmFtZSc6J1ZpZXdlclJlYWN0aW9uc011dGF0aW9uJywNCiAgICAgICAgICAgICdYLUZCLVJlcXVlc3QtQW5hbHl0aWNzLVRhZ3MnOidncmFwaHNlcnZpY2UnLA0KICAgICAgICAgICAgJ1gtRkItSFRUUC1FbmdpbmUnOidMaWdlcicsDQogICAgICAgICAgICAnWC1GQi1DbGllbnQtSVAnOidUcnVlJywNCiAgICAgICAgICAgICdYLUZCLVNlcnZlci1DbHVzdGVyJzonVHJ1ZScsDQogICAgICAgICAgICAneC1mYi1jb25uZWN0aW9uLXRva2VuJzonNjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInfQ0KICAgICAgICAgICAgdXJsID0gJ2h0dHBzOi8vYi1ncmFwaC5mYWNlYm9vay5jb20vYXV0aC9sb2dpbicNCiAgICAgICAgICAgIHBvID0gcmVxdWVzdHMucG9zdCh1cmwsZGF0YT1kYXRhLGhlYWRlcnM9aGVhZCxhbGxvd19yZWRpcmVjdHM9RmFsc2UpLnRleHQNCiAgICAgICAgICAgIHEgPSBqc29uLmxvYWRzKHBvKQ0KICAgICAgICAgICAgaWYgJ2FjY2Vzc190b2tlbicgaW4gcToNCiAgICAgICAgICAgICAgICB1aWQgPSBzdHIocVsndWlkJ10pDQogICAgICAgICAgICAgICAgY29raSA9ICI7Ii5qb2luKGlbIm5hbWUiXSsiPSIraVsidmFsdWUiXSBmb3IgaSBpbiBxWyJzZXNzaW9uX2Nvb2tpZXMiXSkNCiAgICAgICAgICAgICAgICBwcmludChmJ1xyXHJ7RzF9W1NXQUctT0tdIHt1aWR9IHwge3Bhc30nKQ0KICAgICAgICAgICAgICAgICNwcmludChmJ1xyXHJ7RzF9W0NPT0tJRV17QX0ge2Nva2l9JykNCiAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL1RNVC1STkRNLU9LLnR4dCcsJ2EnKS53cml0ZSh1aWQrJ3wnK3BhcysnfCcrY29raSsnXG4nKQ0KICAgICAgICAgICAgICAgIG9rLmFwcGVuZCh1aWQpDQogICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgIGVsc2U6Y29udGludWUNCiAgICAgICAgbG9vcCs9MQ0KICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgcGFzcw0KICAgICAgICAgIA0KbWVudSgpDQojX19fX19fX19fX19fX19fX19fWyBFTkQgXV9fX19fX19fX19fX19fX19fXyM="))